Console.WriteLine("=== Dica 76: Exce√ß√µes Apenas para Casos Excepcionais ===\n");

// 1. PROBLEMA: Usando exce√ß√µes para controle de fluxo
Console.WriteLine("1. ‚ùå MAU EXEMPLO - Exce√ß√µes para controle de fluxo:");
var validadorRuim = new ValidadorRuim();

var emails = new[] { "teste@email.com", "email-invalido", "usuario@empresa.com.br", "" };

foreach (var email in emails)
{
    try
    {
        if (validadorRuim.ValidarEmail(email))
        {
            Console.WriteLine($"  ‚úÖ Email v√°lido: {email}");
        }
    }
    catch (ArgumentException ex)
    {
        Console.WriteLine($"  ‚ùå Email inv√°lido: {email} - {ex.Message}");
    }
    catch (InvalidOperationException ex)
    {
        Console.WriteLine($"  ‚ùå Email vazio: {email} - {ex.Message}");
    }
}

// 2. SOLU√á√ÉO: Result Pattern ou return codes
Console.WriteLine("\n2. ‚úÖ BOM EXEMPLO - Result Pattern:");
var validadorBom = new ValidadorBom();

foreach (var email in emails)
{
    var resultado = validadorBom.ValidarEmail(email);
    if (resultado.IsSuccess)
    {
        Console.WriteLine($"  ‚úÖ Email v√°lido: {email}");
    }
    else
    {
        Console.WriteLine($"  ‚ùå Email inv√°lido: {email} - {resultado.ErrorMessage}");
    }
}

// 3. PROBLEMA: Try-Parse manual com exce√ß√µes
Console.WriteLine("\n3. ‚ùå MAU EXEMPLO - Parse com exce√ß√µes:");
var conversorRuim = new ConversorRuim();

var numeros = new[] { "123", "abc", "456.78", "-999", "999999999999999999999" };

foreach (var numero in numeros)
{
    try
    {
        var valor = conversorRuim.ConverterParaInteiro(numero);
        Console.WriteLine($"  ‚úÖ '{numero}' = {valor}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"  ‚ùå '{numero}' - Erro: {ex.GetType().Name}");
    }
}

// 4. SOLU√á√ÉO: TryParse pattern
Console.WriteLine("\n4. ‚úÖ BOM EXEMPLO - TryParse pattern:");
var conversorBom = new ConversorBom();

foreach (var numero in numeros)
{
    if (conversorBom.TentarConverterParaInteiro(numero, out var valor))
    {
        Console.WriteLine($"  ‚úÖ '{numero}' = {valor}");
    }
    else
    {
        Console.WriteLine($"  ‚ùå '{numero}' - Formato inv√°lido");
    }
}

// 5. Cache com lazy loading - compara√ß√£o de abordagens
Console.WriteLine("\n5. Cache - Compara√ß√£o de Abordagens:");

// Abordagem com exce√ß√µes (problem√°tica)
var cacheComExcecoes = new CacheComExcecoes();
Console.WriteLine("Cache com exce√ß√µes:");
TestCache("usuario1", cacheComExcecoes.ObterDados);
TestCache("usuario1", cacheComExcecoes.ObterDados); // hit do cache

// Abordagem sem exce√ß√µes (melhor)
var cacheSemExcecoes = new CacheSemExcecoes();
Console.WriteLine("\nCache sem exce√ß√µes:");
TestCache("usuario1", cacheSemExcecoes.ObterDados);
TestCache("usuario1", cacheSemExcecoes.ObterDados); // hit do cache

// 6. Opera√ß√µes de arquivo - quando usar exce√ß√µes
Console.WriteLine("\n6. Opera√ß√µes de Arquivo:");
var gerenciadorArquivo = new GerenciadorArquivo();

// Caso onde exce√ß√£o √â apropriada (erro inesperado do sistema)
try
{
    var conteudo = gerenciadorArquivo.LerArquivoObrigatorio("arquivo-critico.txt");
    Console.WriteLine($"  ‚úÖ Arquivo lido: {conteudo.Length} caracteres");
}
catch (FileNotFoundException)
{
    Console.WriteLine("  ‚ùå Arquivo cr√≠tico n√£o encontrado - FALHA DO SISTEMA");
}
catch (UnauthorizedAccessException)
{
    Console.WriteLine("  ‚ùå Sem permiss√£o para ler arquivo cr√≠tico - FALHA DO SISTEMA");
}

// Caso onde exce√ß√£o N√ÉO √© apropriada (comportamento esperado)
var resultadoArquivo = gerenciadorArquivo.TentarLerArquivoOpcional("config-opcional.txt");
if (resultadoArquivo.Success)
{
    Console.WriteLine($"  ‚úÖ Config opcional encontrada: {resultadoArquivo.Content?.Length} caracteres");
}
else
{
    Console.WriteLine($"  ‚ÑπÔ∏è Config opcional n√£o encontrada, usando padr√£o: {resultadoArquivo.Error}");
}

// 7. Performance - demonstra√ß√£o do impacto
Console.WriteLine("\n7. Impacto na Performance:");
var testePerfomance = new TestePerformance();
testePerfomance.CompararAbordagens();

// 8. Exce√ß√µes apropriadas
Console.WriteLine("\n8. ‚úÖ Casos Apropriados para Exce√ß√µes:");
var servicoOperacoes = new ServicoOperacoes();

try
{
    servicoOperacoes.DividirPorZero(10, 0);
}
catch (DivideByZeroException ex)
{
    Console.WriteLine($"  ‚ùå Erro matem√°tico: {ex.Message}");
}

try
{
    servicoOperacoes.AcessarMemoriaInvalida();
}
catch (NullReferenceException ex)
{
    Console.WriteLine($"  ‚ùå Erro de estado: {ex.Message}");
}

try
{
    servicoOperacoes.ConectarBancoDados("connection-string-invalida");
}
catch (InvalidOperationException ex)
{
    Console.WriteLine($"  ‚ùå Erro de infraestrutura: {ex.Message}");
}

Console.WriteLine("\n9. üìã Resumo das Boas Pr√°ticas:");
Console.WriteLine("  ‚úÖ Use exce√ß√µes para erros inesperados do sistema");
Console.WriteLine("  ‚úÖ Use Result Pattern para valida√ß√µes de neg√≥cio");
Console.WriteLine("  ‚úÖ Use TryParse para convers√µes que podem falhar");
Console.WriteLine("  ‚úÖ Use nullable ou Optional para valores que podem n√£o existir");
Console.WriteLine("  ‚ùå N√ÉO use exce√ß√µes para controle de fluxo normal");
Console.WriteLine("  ‚ùå N√ÉO use exce√ß√µes para valida√ß√£o de entrada do usu√°rio");
Console.WriteLine("  ‚ùå N√ÉO use exce√ß√µes quando falha √© comportamento esperado");

Console.WriteLine("\n=== Fim da Demonstra√ß√£o ===");

static void TestCache(string chave, Func<string, string> obterDados)
{
    var inicio = DateTime.Now;
    var resultado = obterDados(chave);
    var tempo = DateTime.Now - inicio;
    Console.WriteLine($"  '{chave}' ‚Üí {resultado} (tempo: {tempo.TotalMilliseconds:F1}ms)");
}

// Classes de apoio

// ‚ùå PROBLEMA: Exce√ß√µes para controle de fluxo
public class ValidadorRuim
{
    public bool ValidarEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
            throw new InvalidOperationException("Email n√£o pode ser vazio");

        if (!email.Contains('@'))
            throw new ArgumentException("Email deve conter @");

        if (!email.Contains('.'))
            throw new ArgumentException("Email deve conter dom√≠nio v√°lido");

        return true;
    }
}

// ‚úÖ SOLU√á√ÉO: Result Pattern
public class ValidadorBom
{
    public ValidationResult ValidarEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
            return ValidationResult.Failure("Email n√£o pode ser vazio");

        if (!email.Contains('@'))
            return ValidationResult.Failure("Email deve conter @");

        if (!email.Contains('.'))
            return ValidationResult.Failure("Email deve conter dom√≠nio v√°lido");

        return ValidationResult.Success();
    }
}

public class ValidationResult
{
    public bool IsSuccess { get; private set; }
    public string ErrorMessage { get; private set; } = "";

    private ValidationResult(bool isSuccess, string errorMessage = "")
    {
        IsSuccess = isSuccess;
        ErrorMessage = errorMessage;
    }

    public static ValidationResult Success() => new(true);
    public static ValidationResult Failure(string error) => new(false, error);
}

// ‚ùå PROBLEMA: Parse com exce√ß√µes
public class ConversorRuim
{
    public int ConverterParaInteiro(string valor)
    {
        if (string.IsNullOrEmpty(valor))
            throw new ArgumentNullException(nameof(valor));

        try
        {
            return int.Parse(valor);
        }
        catch (FormatException)
        {
            throw new ArgumentException($"'{valor}' n√£o √© um n√∫mero v√°lido");
        }
        catch (OverflowException)
        {
            throw new ArgumentException($"'{valor}' √© muito grande para int");
        }
    }
}

// ‚úÖ SOLU√á√ÉO: TryParse pattern
public class ConversorBom
{
    public bool TentarConverterParaInteiro(string valor, out int resultado)
    {
        return int.TryParse(valor, out resultado);
    }

    public int? ConverterParaInteiroNullable(string valor)
    {
        return int.TryParse(valor, out var resultado) ? resultado : null;
    }
}

// ‚ùå PROBLEMA: Cache com exce√ß√µes
public class CacheComExcecoes
{
    private readonly Dictionary<string, string> _cache = new();

    public string ObterDados(string chave)
    {
        try
        {
            return _cache[chave];
        }
        catch (KeyNotFoundException)
        {
            // Carregar dados "pesados"
            Thread.Sleep(50); // Simula opera√ß√£o custosa
            var dados = $"Dados para {chave}";
            _cache[chave] = dados;
            return dados;
        }
    }
}

// ‚úÖ SOLU√á√ÉO: Cache sem exce√ß√µes
public class CacheSemExcecoes
{
    private readonly Dictionary<string, string> _cache = new();

    public string ObterDados(string chave)
    {
        if (_cache.TryGetValue(chave, out var dadosCacheados))
        {
            return dadosCacheados;
        }

        // Carregar dados "pesados"
        Thread.Sleep(50); // Simula opera√ß√£o custosa
        var dados = $"Dados para {chave}";
        _cache[chave] = dados;
        return dados;
    }
}

public class GerenciadorArquivo
{
    // ‚úÖ Exce√ß√£o apropriada - arquivo cr√≠tico deve existir
    public string LerArquivoObrigatorio(string caminho)
    {
        // Arquivo cr√≠tico - se n√£o existir, √© erro do sistema
        return File.ReadAllText(caminho);
    }

    // ‚úÖ Sem exce√ß√£o - arquivo opcional pode n√£o existir
    public FileResult TentarLerArquivoOpcional(string caminho)
    {
        try
        {
            var conteudo = File.ReadAllText(caminho);
            return FileResult.CreateSuccess(conteudo);
        }
        catch (FileNotFoundException)
        {
            return FileResult.CreateFailure("Arquivo n√£o encontrado");
        }
        catch (UnauthorizedAccessException)
        {
            return FileResult.CreateFailure("Sem permiss√£o para ler arquivo");
        }
        catch (Exception ex)
        {
            return FileResult.CreateFailure($"Erro inesperado: {ex.Message}");
        }
    }
}

public class FileResult
{
    public bool Success { get; private set; }
    public string? Content { get; private set; }
    public string Error { get; private set; } = "";

    private FileResult(bool success, string? content = null, string error = "")
    {
        Success = success;
        Content = content;
        Error = error;
    }

    public static FileResult CreateSuccess(string content) => new(true, content);
    public static FileResult CreateFailure(string error) => new(false, null, error);
}

public class TestePerformance
{
    public void CompararAbordagens()
    {
        const int iteracoes = 10000;

        // Teste com exce√ß√µes (lento)
        var inicioExcecoes = DateTime.Now;
        var contadorExcecoes = 0;
        
        for (int i = 0; i < iteracoes; i++)
        {
            try
            {
                if (i % 2 == 0)
                    throw new InvalidOperationException("Teste");
            }
            catch
            {
                contadorExcecoes++;
            }
        }
        
        var tempoExcecoes = DateTime.Now - inicioExcecoes;

        // Teste sem exce√ß√µes (r√°pido)
        var inicioSemExcecoes = DateTime.Now;
        var contadorSemExcecoes = 0;
        
        for (int i = 0; i < iteracoes; i++)
        {
            if (i % 2 == 0)
                contadorSemExcecoes++;
        }
        
        var tempoSemExcecoes = DateTime.Now - inicioSemExcecoes;

        Console.WriteLine($"  Com exce√ß√µes: {tempoExcecoes.TotalMilliseconds:F1}ms ({contadorExcecoes} exce√ß√µes)");
        Console.WriteLine($"  Sem exce√ß√µes: {tempoSemExcecoes.TotalMilliseconds:F1}ms ({contadorSemExcecoes} casos)");
        Console.WriteLine($"  Diferen√ßa: {(tempoExcecoes.TotalMilliseconds / tempoSemExcecoes.TotalMilliseconds):F1}x mais lento com exce√ß√µes");
    }
}

public class ServicoOperacoes
{
    // ‚úÖ Exce√ß√£o apropriada - opera√ß√£o matematicamente inv√°lida
    public double DividirPorZero(double a, double b)
    {
        if (b == 0)
            throw new DivideByZeroException("N√£o √© poss√≠vel dividir por zero");
        
        return a / b;
    }

    // ‚úÖ Exce√ß√£o apropriada - estado inv√°lido do objeto
    public void AcessarMemoriaInvalida()
    {
        string? texto = null;
        // Isso deve gerar NullReferenceException - indica bug no c√≥digo
        var tamanho = texto.Length;
    }

    // ‚úÖ Exce√ß√£o apropriada - falha de infraestrutura
    public void ConectarBancoDados(string connectionString)
    {
        if (string.IsNullOrEmpty(connectionString) || connectionString == "connection-string-invalida")
        {
            throw new InvalidOperationException("Falha ao conectar com banco de dados - verificar infraestrutura");
        }
    }
}
