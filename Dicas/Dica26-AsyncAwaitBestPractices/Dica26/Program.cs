using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace Dica26;

/// <summary>
/// Dica 26: Async/Await Best Practices
/// 
/// Esta dica demonstra as melhores pr√°ticas ao trabalhar com async/await em C#,
/// incluindo ConfigureAwait, tratamento de exce√ß√µes, evitar deadlocks e otimiza√ß√µes de performance.
/// </summary>
public class Program
{
    public static async Task Main(string[] args)
    {
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices(services =>
            {
                services.AddScoped<AsyncBestPracticesService>();
            })
            .Build();

        var logger = host.Services.GetRequiredService<ILogger<Program>>();
        var service = host.Services.GetRequiredService<AsyncBestPracticesService>();

        logger.LogInformation("=== Dica 26: Async/Await Best Practices ===\n");

        // 1. Melhores Pr√°ticas ConfigureAwait
        logger.LogInformation("1. Melhores Pr√°ticas ConfigureAwait:");
        await service.DemonstrarConfigureAwaitAsync();

        // 2. Tratamento de Exce√ß√µes em M√©todos Async
        logger.LogInformation("\n2. Tratamento de Exce√ß√µes em M√©todos Async:");
        await service.DemonstrarTratamentoExcecoesAsync();

        // 3. Evitando Async Void
        logger.LogInformation("\n3. Evitando Async Void:");
        await service.DemonstrarProblemasAsyncVoidAsync();

        // 4. Task.WhenAll vs M√∫ltiplos Awaits
        logger.LogInformation("\n4. Task.WhenAll vs M√∫ltiplos Awaits:");
        await service.DemonstrarTaskWhenAllAsync();

        // 5. Melhores Pr√°ticas CancellationToken
        logger.LogInformation("\n5. Melhores Pr√°ticas CancellationToken:");
        await service.DemonstrarCancellationTokenAsync();

        // 6. ValueTask para Hot Paths
        logger.LogInformation("\n6. ValueTask para Hot Paths:");
        await service.DemonstrarValueTaskAsync();

        // 7. Padr√µes Fire-and-Forget
        logger.LogInformation("\n7. Padr√µes Fire-and-Forget:");
        await service.DemonstrarFireAndForgetAsync();

        // 8. Timeout HTTP com CancellationToken
        logger.LogInformation("\n8. Timeout HTTP com CancellationToken:");
        await service.DemonstrarTimeoutHttpAsync();

        logger.LogInformation("\n=== Async/Await Best Practices Demo Completed ===");
    }
}

public class AsyncBestPracticesService
{
    private readonly ILogger<AsyncBestPracticesService> _logger;
    private readonly HttpClient _httpClient;
    private readonly Dictionary<string, string> _cache;

    public AsyncBestPracticesService(ILogger<AsyncBestPracticesService> logger)
    {
        _logger = logger;
        _httpClient = new HttpClient();
        _cache = new Dictionary<string, string>();
    }

    /// <summary>
    /// Demonstra o uso correto de ConfigureAwait
    /// </summary>
    public async Task DemonstrarConfigureAwaitAsync()
    {
        _logger.LogInformation("   üìö ConfigureAwait: Library vs Application code");

        // ‚ùå RUIM: Em c√≥digo de biblioteca, n√£o usar ConfigureAwait(false)
        // pode causar deadlocks em aplica√ß√µes SynchronizationContext
        await MetodoBibliotecaRuimAsync();

        // ‚úÖ BOM: Em c√≥digo de biblioteca, sempre usar ConfigureAwait(false)
        await MetodoBibliotecaBomAsync();

        // üìù NOTA: Em aplica√ß√µes (n√£o bibliotecas), ConfigureAwait(false) pode ser opcional
        // mas ainda √© uma boa pr√°tica para evitar overhead desnecess√°rio
        await MetodoAplicacaoAsync();
    }

    /// <summary>
    /// M√©todo de biblioteca SEM ConfigureAwait - pode causar deadlock
    /// </summary>
    private async Task MetodoBibliotecaRuimAsync()
    {
        _logger.LogInformation("      ‚ùå M√©todo biblioteca SEM ConfigureAwait");

        // Simula opera√ß√£o I/O - PERIGOSO em biblioteca
        await Task.Delay(100); // Sem ConfigureAwait(false)

        _logger.LogInformation("      ‚ùå Completo - risco de deadlock");
    }

    /// <summary>
    /// M√©todo de biblioteca COM ConfigureAwait - seguro
    /// </summary>
    private async Task MetodoBibliotecaBomAsync()
    {
        _logger.LogInformation("      ‚úÖ M√©todo biblioteca COM ConfigureAwait(false)");

        // Simula opera√ß√£o I/O - SEGURO em biblioteca
        await Task.Delay(100).ConfigureAwait(false);

        _logger.LogInformation("      ‚úÖ Completo - sem risco de deadlock");
    }

    /// <summary>
    /// M√©todo de aplica√ß√£o - ConfigureAwait opcional mas recomendado
    /// </summary>
    private async Task MetodoAplicacaoAsync()
    {
        _logger.LogInformation("      üì± M√©todo de aplica√ß√£o - ConfigureAwait opcional");

        // Em aplica√ß√µes, ConfigureAwait(false) √© opcional mas recomendado para performance
        await Task.Delay(50).ConfigureAwait(false);

        _logger.LogInformation("      üì± M√©todo de aplica√ß√£o completo");
    }

    /// <summary>
    /// Demonstra tratamento correto de exce√ß√µes em m√©todos async
    /// </summary>
    public async Task DemonstrarTratamentoExcecoesAsync()
    {
        _logger.LogInformation("   üî• Padr√µes de Tratamento de Exce√ß√µes");

        // 1. Tratamento de exce√ß√µes em m√©todos async
        await TratarExcecoesCorretamenteAsync();

        // 2. AggregateException com Task.WhenAll
        await TratarExcecoesAgregadasAsync();

        // 3. Propaga√ß√£o de exce√ß√µes
        await DemonstrarPropagacaoExcecaoAsync();
    }

    private async Task TratarExcecoesCorretamenteAsync()
    {
        try
        {
            _logger.LogInformation("      üéØ Chamando m√©todo async que lan√ßa exce√ß√£o...");
            await MetodoAsyncQueLancaExcecaoAsync();
        }
        catch (InvalidOperationException ex)
        {
            _logger.LogInformation($"      ‚úÖ Exce√ß√£o esperada capturada: {ex.Message}");
        }
        catch (Exception ex)
        {
            _logger.LogError($"      ‚ùå Exce√ß√£o inesperada: {ex.Message}");
        }
    }

    private async Task TratarExcecoesAgregadasAsync()
    {
        try
        {
            _logger.LogInformation("      üéØ Usando Task.WhenAll com m√∫ltiplas tasks que falham...");

            var tasks = new[]
            {
                MetodoAsyncQueLancaExcecaoAsync(),
                MetodoAsyncQueLancaExcecaoAsync(),
                Task.Delay(100) // Uma task que n√£o falha
            };

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"      ‚ö†Ô∏è  Primeira exce√ß√£o capturada: {ex.Message}");
            _logger.LogInformation("      üìù Nota: Task.WhenAll lan√ßa apenas a primeira exce√ß√£o");
        }
    }

    private async Task DemonstrarPropagacaoExcecaoAsync()
    {
        _logger.LogInformation("      üîÑ Propaga√ß√£o de exce√ß√£o pela cadeia async");

        try
        {
            await MetodoAsync1();
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"      ‚úÖ Exce√ß√£o propagada corretamente: {ex.Message}");
        }
    }

    private async Task MetodoAsync1()
    {
        await MetodoAsync2();
    }

    private async Task MetodoAsync2()
    {
        await MetodoAsync3();
    }

    private async Task MetodoAsync3()
    {
        await Task.Delay(10);
        throw new InvalidOperationException("Exce√ß√£o de chamada async profunda");
    }

    private async Task MetodoAsyncQueLancaExcecaoAsync()
    {
        await Task.Delay(10);
        throw new InvalidOperationException("Exce√ß√£o async simulada");
    }

    /// <summary>
    /// Demonstra por que evitar async void
    /// </summary>
    public async Task DemonstrarProblemasAsyncVoidAsync()
    {
        _logger.LogInformation("   ‚ö†Ô∏è  Problemas com Async Void");

        // ‚úÖ BOM: Async Task para m√©todos que podem ser awaited
        await MetodoAsyncBomAsync();

        // ‚ùå RUIM: Async void - n√£o pode ser awaited, exce√ß√µes n√£o podem ser capturadas
        _logger.LogInformation("      ‚ùå Chamando m√©todo async void (fire and forget)");
        MetodoAsyncVoidRuim(); // N√£o podemos await isso!

        // Espera um pouco para ver se a async void completa
        await Task.Delay(200);

        _logger.LogInformation("      üìù Async void completou (talvez), mas n√£o pudemos esperar");
    }

    private async Task MetodoAsyncBomAsync()
    {
        _logger.LogInformation("      ‚úÖ M√©todo async Task bom");
        await Task.Delay(100);
        _logger.LogInformation("      ‚úÖ M√©todo async bom completou");
    }

    private async void MetodoAsyncVoidRuim()
    {
        _logger.LogInformation("      ‚ùå M√©todo async void ruim iniciado");
        await Task.Delay(150);
        _logger.LogInformation("      ‚ùå M√©todo async void ruim completou");

        // Se essa linha lan√ßasse uma exce√ß√£o, seria muito dif√≠cil de capturar!
        // throw new InvalidOperationException("Exce√ß√£o n√£o tratada em async void!");
    }

    /// <summary>
    /// Demonstra Task.WhenAll vs multiple awaits sequenciais
    /// </summary>
    public async Task DemonstrarTaskWhenAllAsync()
    {
        _logger.LogInformation("   üöÄ Task.WhenAll vs Awaits Sequenciais");

        // ‚ùå RUIM: Awaits sequenciais - muito lento
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        await AwaitsSequenciaisAsync();
        stopwatch.Stop();
        _logger.LogInformation($"      ‚ùå Awaits sequenciais levaram: {stopwatch.ElapsedMilliseconds}ms");

        // ‚úÖ BOM: Task.WhenAll - execu√ß√£o paralela
        stopwatch.Restart();
        await ParaleloComWhenAllAsync();
        stopwatch.Stop();
        _logger.LogInformation($"      ‚úÖ Task.WhenAll levou: {stopwatch.ElapsedMilliseconds}ms");
    }

    private async Task AwaitsSequenciaisAsync()
    {
        _logger.LogInformation("      üêå Iniciando opera√ß√µes sequenciais...");

        await SimularChamadaApiAsync("Servi√ßo A", 100);
        await SimularChamadaApiAsync("Servi√ßo B", 100);
        await SimularChamadaApiAsync("Servi√ßo C", 100);

        _logger.LogInformation("      üêå Opera√ß√µes sequenciais completadas");
    }

    private async Task ParaleloComWhenAllAsync()
    {
        _logger.LogInformation("      üöÄ Iniciando opera√ß√µes paralelas...");

        var tasks = new[]
        {
            SimularChamadaApiAsync("Servi√ßo A", 100),
            SimularChamadaApiAsync("Servi√ßo B", 100),
            SimularChamadaApiAsync("Servi√ßo C", 100)
        };

        await Task.WhenAll(tasks);

        _logger.LogInformation("      üöÄ Opera√ß√µes paralelas completadas");
    }

    private async Task SimularChamadaApiAsync(string nomeServico, int delayMs)
    {
        _logger.LogInformation($"         üì° Chamando {nomeServico}...");
        await Task.Delay(delayMs);
        _logger.LogInformation($"         ‚úÖ {nomeServico} respondeu");
    }

    /// <summary>
    /// Demonstra uso correto de CancellationToken
    /// </summary>
    public async Task DemonstrarCancellationTokenAsync()
    {
        _logger.LogInformation("   üõë Melhores Pr√°ticas CancellationToken");

        using var cts = new CancellationTokenSource();

        // Cancela ap√≥s 500ms
        cts.CancelAfter(500);

        try
        {
            await OperacaoDemoradaAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("      ‚úÖ Opera√ß√£o foi cancelada com sucesso");
        }

        // Demonstra propaga√ß√£o de CancellationToken
        await DemonstrarPropagacaoCancellationAsync();
    }

    private async Task OperacaoDemoradaAsync(CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("      üîÑ Iniciando opera√ß√£o demorada...");

        for (int i = 0; i < 10; i++)
        {
            // ‚úÖ BOM: Verificar cancellation token regularmente
            cancellationToken.ThrowIfCancellationRequested();

            _logger.LogInformation($"         Passo {i + 1}/10");

            // ‚úÖ BOM: Passar token para opera√ß√µes async
            await Task.Delay(100, cancellationToken);
        }

        _logger.LogInformation("      ‚úÖ Opera√ß√£o demorada completada");
    }

    private async Task DemonstrarPropagacaoCancellationAsync()
    {
        _logger.LogInformation("      üîó Propaga√ß√£o de CancellationToken");

        using var cts = new CancellationTokenSource();
        cts.CancelAfter(200);

        try
        {
            await MetodoQuePropagaTokenAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            _logger.LogInformation("      ‚úÖ Cancelamento propagado pela cadeia de chamadas");
        }
    }

    private async Task MetodoQuePropagaTokenAsync(CancellationToken cancellationToken)
    {
        // ‚úÖ BOM: Sempre propagar CancellationToken
        await OutroMetodoAsync(cancellationToken);
    }

    private async Task OutroMetodoAsync(CancellationToken cancellationToken)
    {
        await Task.Delay(300, cancellationToken); // Vai ser cancelado
    }

    /// <summary>
    /// Demonstra quando usar ValueTask vs Task
    /// </summary>
    public async Task DemonstrarValueTaskAsync()
    {
        _logger.LogInformation("   ‚ö° ValueTask para Hot Paths");

        // Primeira chamada - cache miss
        _logger.LogInformation("      üîç Primeira chamada (cache miss):");
        var result1 = await ObterDadosCacheAsync("chave1");
        _logger.LogInformation($"         Resultado: {result1}");

        // Segunda chamada - cache hit (ValueTask optimization)
        _logger.LogInformation("      üéØ Segunda chamada (cache hit):");
        var result2 = await ObterDadosCacheAsync("chave1");
        _logger.LogInformation($"         Resultado: {result2}");

        // Demonstra diferen√ßa de aloca√ß√£o
        await CompararAlocacoesTaskVsValueTaskAsync();
    }

    /// <summary>
    /// M√©todo que retorna ValueTask para otimizar casos s√≠ncronos (cache hit)
    /// </summary>
    private ValueTask<string> ObterDadosCacheAsync(string chave)
    {
        // ‚úÖ Cache hit - retorna ValueTask s√≠ncrono (sem aloca√ß√£o de Task)
        if (_cache.TryGetValue(chave, out var valorCache))
        {
            _logger.LogInformation("         üí® Cache HIT - retorno s√≠ncrono ValueTask");
            return ValueTask.FromResult(valorCache);
        }

        // Cache miss - precisa fazer opera√ß√£o async
        _logger.LogInformation("         üêå Cache MISS - opera√ß√£o async necess√°ria");
        return ObterDadosInternoAsync(chave);
    }

    private async ValueTask<string> ObterDadosInternoAsync(string chave)
    {
        // Simula opera√ß√£o I/O
        await Task.Delay(100);

        var dados = $"Dados para {chave} - {DateTime.Now:HH:mm:ss}";
        _cache[chave] = dados;

        return dados;
    }

    private async Task CompararAlocacoesTaskVsValueTaskAsync()
    {
        _logger.LogInformation("      üìä Compara√ß√£o de aloca√ß√£o Task vs ValueTask:");

        // Task sempre aloca, mesmo para retornos s√≠ncronos
        var taskResult = await ObterDadosComTaskAsync("em_cache");
        _logger.LogInformation($"         Resultado Task: {taskResult}");

        // ValueTask n√£o aloca para retornos s√≠ncronos
        var valueTaskResult = await ObterDadosComValueTaskAsync("em_cache");
        _logger.LogInformation($"         Resultado ValueTask: {valueTaskResult}");

        _logger.LogInformation("      üìù ValueTask evita aloca√ß√£o para retornos s√≠ncronos");

        // Benchmark real: 10.000 cache hits
        await BenchmarkCacheHitsAsync();
    }

    private async Task BenchmarkCacheHitsAsync()
    {
        _logger.LogInformation("\n      üî¨ BENCHMARK: 10.000 cache hits (ValueTask vs Task)");

        // Preparar cache
        _cache["chave_benchmark"] = "valor_cache";

        // Benchmark Task
        var taskStopwatch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < 10000; i++)
        {
            await ObterDadosComTaskAsync("chave_benchmark");
        }
        taskStopwatch.Stop();
        _logger.LogInformation($"         Task (10K hits): {taskStopwatch.ElapsedMilliseconds}ms");

        // Benchmark ValueTask
        var valueTaskStopwatch = System.Diagnostics.Stopwatch.StartNew();
        for (int i = 0; i < 10000; i++)
        {
            await ObterDadosComValueTaskAsync("chave_benchmark");
        }
        valueTaskStopwatch.Stop();
        _logger.LogInformation($"         ValueTask (10K hits): {valueTaskStopwatch.ElapsedMilliseconds}ms");

        var improvement = ((double)(taskStopwatch.ElapsedMilliseconds - valueTaskStopwatch.ElapsedMilliseconds) / taskStopwatch.ElapsedMilliseconds) * 100;
        _logger.LogInformation($"         üí° ValueTask foi ~{improvement:F1}% mais r√°pido (menos aloca√ß√µes)");
    }

    private Task<string> ObterDadosComTaskAsync(string chave)
    {
        // ‚ùå Task sempre aloca, mesmo para retorno imediato
        if (_cache.TryGetValue(chave, out var valor))
        {
            return Task.FromResult(valor); // Ainda aloca um Task
        }

        return Task.FromResult($"Novos dados para {chave}");
    }

    private ValueTask<string> ObterDadosComValueTaskAsync(string chave)
    {
        // ‚úÖ ValueTask n√£o aloca para retorno imediato
        if (_cache.TryGetValue(chave, out var valor))
        {
            return ValueTask.FromResult(valor); // Sem aloca√ß√£o!
        }

        return ValueTask.FromResult($"Novos dados para {chave}");
    }

    /// <summary>
    /// Demonstra padr√µes seguros de fire-and-forget
    /// </summary>
    public async Task DemonstrarFireAndForgetAsync()
    {
        _logger.LogInformation("   üî• Padr√µes Fire-and-Forget");

        // ‚ùå RUIM: Fire-and-forget sem supervis√£o
        _logger.LogInformation("\n      ‚ùå RUIM: Fire-and-forget sem supervis√£o");
        _logger.LogInformation("      // _ = TarefaBackgroundAsync(); // Exce√ß√µes ser√£o engolidas!");

        // ‚úÖ BOM: Fire-and-forget supervisionado
        _logger.LogInformation("\n      ‚úÖ BOM: Fire-and-forget supervisionado com Task.Run");
        _ = Task.Run(async () =>
        {
            try
            {
                await TarefaBackgroundSupervisionadaAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Tarefa background falhou");
            }
        });

        // ‚úÖ MELHOR: Usar BackgroundService ou IHostedService
        _logger.LogInformation("      üí° MELHOR: Use BackgroundService/IHostedService em produ√ß√£o");
        _logger.LogInformation("      // public class MeuBackgroundService : BackgroundService { ... }");

        // Aguarda um pouco para ver o resultado da tarefa em background
        await Task.Delay(300);
    }

    private async Task TarefaBackgroundSupervisionadaAsync()
    {
        _logger.LogInformation("      üîÑ Tarefa background iniciada (supervisionada)");
        await Task.Delay(200);
        _logger.LogInformation("      ‚úÖ Tarefa background completada com sucesso");

        // Se descomentar, a exce√ß√£o ser√° capturada no try/catch
        // throw new InvalidOperationException("Erro simulado de background");
    }

    /// <summary>
    /// Demonstra timeout HTTP com CancellationToken
    /// </summary>
    public async Task DemonstrarTimeoutHttpAsync()
    {
        _logger.LogInformation("   ‚è±Ô∏è  Timeout HTTP com CancellationToken");

        // Simula requisi√ß√£o HTTP lenta
        _logger.LogInformation("\n      üì° Chamando API lenta com timeout de 2s...");

        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(2));

        try
        {
            var result = await SimularChamadaApiLentaAsync(cts.Token);
            _logger.LogInformation($"      ‚úÖ API respondeu: {result}");
        }
        catch (OperationCanceledException)
        {
            _logger.LogWarning("      ‚è∞ Requisi√ß√£o TIMEOUT ap√≥s 2 segundos");
        }

        // Exemplo com HttpClient real (comentado para n√£o fazer chamadas externas)
        _logger.LogInformation("\n      üí° Com HttpClient real:");
        _logger.LogInformation("      // using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));");
        _logger.LogInformation("      // var response = await httpClient.GetAsync(url, cts.Token);");

        // Demonstra m√∫ltiplos timeouts
        await DemonstrarMultiplosTimeoutsAsync();
    }

    private async Task<string> SimularChamadaApiLentaAsync(CancellationToken cancellationToken)
    {
        _logger.LogInformation("      üêå Simulando API lenta (3 segundos de atraso)...");

        // API demora 3 segundos, mas timeout √© 2 segundos
        await Task.Delay(3000, cancellationToken);

        return "Resposta da API (n√£o alcan√ßada devido ao timeout)";
    }

    private async Task DemonstrarMultiplosTimeoutsAsync()
    {
        _logger.LogInformation("\n      üî¢ Testando m√∫ltiplos endpoints com timeouts individuais:");

        var tasks = new[]
        {
            ChamarApiComTimeoutAsync("API A", delayMs: 500, timeoutSegundos: 1),
            ChamarApiComTimeoutAsync("API B", delayMs: 1500, timeoutSegundos: 1),
            ChamarApiComTimeoutAsync("API C", delayMs: 800, timeoutSegundos: 2)
        };

        var results = await Task.WhenAll(tasks);

        _logger.LogInformation("\n      üìä Resultados:");
        foreach (var result in results)
        {
            _logger.LogInformation($"         {result}");
        }
    }

    private async Task<string> ChamarApiComTimeoutAsync(string nomeApi, int delayMs, int timeoutSegundos)
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(timeoutSegundos));

        try
        {
            await Task.Delay(delayMs, cts.Token);
            return $"{nomeApi}: ‚úÖ Sucesso ({delayMs}ms < {timeoutSegundos}s)";
        }
        catch (OperationCanceledException)
        {
            return $"{nomeApi}: ‚è∞ Timeout ({delayMs}ms > {timeoutSegundos}s)";
        }
    }
}
