using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Diagnostics;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace Dica41.InterpolatedStrings;

/// <summary>
/// Demonstra o uso avan√ßado de Interpolated Strings e StringBuilder para performance otimizada
/// </summary>
public class Program
{
    public static void Main(string[] args)
    {
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices(services =>
            {
                services.AddSingleton<DemoService>();
            })
            .Build();

        var demo = host.Services.GetRequiredService<DemoService>();
        demo.ExecutarTodasDemonstracoes();
    }
}

public class DemoService
{
    private readonly ILogger<DemoService> _logger;

    public DemoService(ILogger<DemoService> logger)
    {
        _logger = logger;
    }

    public Task ExecutarTodasDemonstracoes()
    {
        Console.WriteLine("===== Dica 41: Interpolated Strings e StringBuilder - Performance Otimizada ====\n");

        Console.WriteLine("üî§ 1. INTERPOLATED STRINGS B√ÅSICO");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        DemonstrarInterpolatedStringsBasico();
        Console.WriteLine("‚úÖ Demonstra√ß√£o b√°sica conclu√≠da\n");

        Console.WriteLine("‚ö° 2. INTERPOLATED STRING HANDLERS");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        DemonstrarStringHandlers();
        Console.WriteLine("‚úÖ Demonstra√ß√£o de handlers conclu√≠da\n");

        Console.WriteLine("üîß 3. FORMATA√á√ÉO AVAN√áADA");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        DemonstrarFormatacaoAvancada();
        Console.WriteLine("‚úÖ Demonstra√ß√£o de formata√ß√£o conclu√≠da\n");

        Console.WriteLine("üèóÔ∏è 4. STRINGBUILDER OTIMIZADO");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        DemonstrarStringBuilderOtimizado();
        Console.WriteLine("‚úÖ Demonstra√ß√£o de StringBuilder conclu√≠da\n");

        Console.WriteLine("üéØ 5. CUSTOM INTERPOLATED STRING HANDLER");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        DemonstrarCustomHandler();
        Console.WriteLine("‚úÖ Demonstra√ß√£o de handler customizado conclu√≠da\n");

        Console.WriteLine("üìä 6. BENCHMARKS DE PERFORMANCE");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        ExecutarBenchmarks();
        Console.WriteLine("‚úÖ Benchmarks conclu√≠dos\n");

        Console.WriteLine("üìã 7. RESUMO DAS BOAS PR√ÅTICAS");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        ExibirBoasPraticas();

        Console.WriteLine("\n=== Demonstra√ß√£o conclu√≠da ===");
        return Task.CompletedTask;
    }

    private void DemonstrarInterpolatedStringsBasico()
    {
        _logger.LogInformation("üî§ Demonstrando Interpolated Strings b√°sico...");

        var nome = "Jo√£o Silva";
        var idade = 30;
        var salario = 5500.75m;
        var dataContratacao = new DateTime(2020, 3, 15);

        // Interpola√ß√£o b√°sica
        var mensagem1 = $"Funcion√°rio: {nome}, Idade: {idade} anos";
        _logger.LogInformation("üìù B√°sico: {mensagem}", mensagem1);

        // Formata√ß√£o inline
        var mensagem2 = $"Sal√°rio: {salario:C} - Contratado em: {dataContratacao:dd/MM/yyyy}";
        _logger.LogInformation("üìù Formatado: {mensagem}", mensagem2);

        // Express√µes dentro da interpola√ß√£o
        var mensagem3 = $"Em 5 anos ter√° {idade + 5} anos e ganhar√° {salario * 1.5m:C}";
        _logger.LogInformation("üìù Express√µes: {mensagem}", mensagem3);

        // Interpola√ß√£o condicional
        var status = idade >= 18 ? "Maior de idade" : "Menor de idade";
        var mensagem4 = $"Status: {(idade >= 18 ? "Adulto" : "Jovem")} - {status}";
        _logger.LogInformation("üìù Condicional: {mensagem}", mensagem4);

        // Verbatim + Interpolated
        var caminho = @$"C:\Users\{nome.Replace(" ", "")}\Documents\arquivo_{DateTime.Now:yyyyMMdd}.txt";
        _logger.LogInformation("üìÅ Caminho: {caminho}", caminho);

        // Raw string literals + Interpolated (C# 11+)
        var json = $$"""
        {
            "nome": "{{nome}}",
            "idade": {{idade}},
            "salario": {{salario}},
            "contratacao": "{{dataContratacao:yyyy-MM-dd}}"
        }
        """;
        _logger.LogInformation("üìÑ JSON:\n{json}", json);
    }

    private void DemonstrarStringHandlers()
    {
        _logger.LogInformation("‚ö° Demonstrando String Handlers...");

        var produtos = new List<Produto>
        {
            new("Notebook", 2500.00m, "Eletr√¥nicos"),
            new("Mouse", 45.90m, "Acess√≥rios"),
            new("Teclado", 180.50m, "Acess√≥rios")
        };

        // DefaultInterpolatedStringHandler para otimiza√ß√£o
        var sb = new DefaultInterpolatedStringHandler();
        sb.AppendLiteral("Produtos dispon√≠veis:");

        foreach (var produto in produtos)
        {
            sb.AppendLiteral("\n- ");
            sb.AppendFormatted(produto.Nome);
            sb.AppendLiteral(" (");
            sb.AppendFormatted(produto.Categoria);
            sb.AppendLiteral("): ");
            sb.AppendFormatted(produto.Preco, "C");
        }

        var resultado = sb.ToStringAndClear();
        _logger.LogInformation("üìã Lista de produtos:\n{resultado}", resultado);

        // Compara√ß√£o com interpola√ß√£o tradicional
        var tradicional = $"Total de produtos: {produtos.Count}";
        
        // Usando handler manual
        var handler = new DefaultInterpolatedStringHandler(18, 1);
        handler.AppendLiteral("Total de produtos: ");
        handler.AppendFormatted(produtos.Count);
        var comHandler = handler.ToStringAndClear();

        _logger.LogInformation("üìä Tradicional: {tradicional}", tradicional);
        _logger.LogInformation("üìä Com Handler: {comHandler}", comHandler);
    }

    private void DemonstrarFormatacaoAvancada()
    {
        _logger.LogInformation("üîß Demonstrando formata√ß√£o avan√ßada...");

        var numero = 1234567.89;
        var data = DateTime.Now;
        var porcentagem = 0.156789;
        var guid = Guid.NewGuid();

        // Formata√ß√£o num√©rica
        var formatosNumericos = $"""
        N√∫mero: {numero}
        Moeda: {numero:C}
        Decimal (2 casas): {numero:F2}
        Cient√≠fica: {numero:E}
        Percentual: {porcentagem:P2}
        Hexadecimal: {(int)numero:X}
        """;
        _logger.LogInformation("üìä Formatos num√©ricos:\n{formatos}", formatosNumericos);

        // Formata√ß√£o de data/hora
        var formatosData = $"""
        Padr√£o: {data}
        Curta: {data:d}
        Longa: {data:D}
        Hora: {data:T}
        ISO 8601: {data:yyyy-MM-ddTHH:mm:ss.fffZ}
        Personalizada: {data:dddd, dd 'de' MMMM 'de' yyyy '√†s' HH:mm}
        """;
        _logger.LogInformation("üìÖ Formatos de data:\n{formatos}", formatosData);

        // Alinhamento e preenchimento
        var nomes = new[] { "Ana", "Jo√£o Pedro", "Carlos", "Maria Fernanda" };
        var alinhamentos = new StringBuilder();
        alinhamentos.AppendLine("Alinhamentos:");
        
        foreach (var nome in nomes)
        {
            alinhamentos.AppendLine($"Esquerda: |{nome,-15}| Direita: |{nome,15}| Centro: |{nome,15}|");
        }
        
        _logger.LogInformation("üìê {alinhamentos}", alinhamentos.ToString());

        // Formata√ß√£o condicional
        var valores = new[] { -10, 0, 15, 100 };
        foreach (var valor in valores)
        {
            var formato = valor switch
            {
                < 0 => $"Negativo: {valor:C} (vermelho)",
                0 => $"Zero: {valor:F0} (neutro)",
                > 0 and <= 50 => $"Baixo: {valor:F0} (amarelo)",
                _ => $"Alto: {valor:F0} (verde)"
            };
            _logger.LogInformation("üé® {formato}", formato);
        }

        // GUID formata√ß√£o
        _logger.LogInformation("üîë GUID: {guid:D}", guid);
        _logger.LogInformation("üîë GUID curto: {guid:N}", guid);
    }

    private void DemonstrarStringBuilderOtimizado()
    {
        _logger.LogInformation("üèóÔ∏è Demonstrando StringBuilder otimizado...");

        // StringBuilder com capacidade inicial
        var sb = new StringBuilder(1000); // Evita realoca√ß√µes

        // Constru√ß√£o eficiente de relat√≥rio
        sb.AppendLine("=== RELAT√ìRIO DE VENDAS ===");
        sb.AppendLine($"Data: {DateTime.Now:dd/MM/yyyy HH:mm}");
        sb.AppendLine();

        var vendas = new[]
        {
            new Venda("Produto A", 10, 25.50m),
            new Venda("Produto B", 5, 120.00m),
            new Venda("Produto C", 15, 8.75m)
        };

        decimal totalGeral = 0;
        sb.AppendLine("ITENS VENDIDOS:");
        sb.AppendLine(new string('-', 50));

        foreach (var venda in vendas)
        {
            var subtotal = venda.Quantidade * venda.PrecoUnitario;
            totalGeral += subtotal;
            
            // Formata√ß√£o alinhada
            sb.AppendFormat("{0,-20} {1,3} x {2,8:C} = {3,10:C}", 
                venda.Produto, venda.Quantidade, venda.PrecoUnitario, subtotal);
            sb.AppendLine();
        }

        sb.AppendLine(new string('-', 50));
        sb.AppendLine($"{"TOTAL GERAL:",-35} {totalGeral,10:C}");

        var relatorio = sb.ToString();
        _logger.LogInformation("üìä Relat√≥rio:\n{relatorio}", relatorio);

        // StringBuilder com interpola√ß√£o (C# 10+)
        sb.Clear();
        sb.AppendLine($"Resumo executivo gerado em {DateTime.Now:HH:mm}");
        sb.AppendLine($"Total de itens: {vendas.Length}");
        sb.AppendLine($"Ticket m√©dio: {totalGeral / vendas.Length:C}");
        
        _logger.LogInformation("üìã Resumo:\n{resumo}", sb.ToString());

        // Opera√ß√µes avan√ßadas
        sb.Clear();
        sb.Append("StringBuilder: ");
        sb.AppendJoin(", ", vendas.Select(v => v.Produto));
        sb.Replace("Produto", "Item");
        sb.Insert(0, "Lista -> ");
        
        _logger.LogInformation("üîß Opera√ß√µes: {resultado}", sb.ToString());
    }

    private void DemonstrarCustomHandler()
    {
        _logger.LogInformation("üéØ Demonstrando custom interpolated string handler...");

        // Usar o handler customizado
        LogMessage($"Usu√°rio {Environment.UserName} logou em {DateTime.Now:HH:mm}");
        LogMessage($"Processando {1000} registros...");
        LogMessage($"Erro: Arquivo n√£o encontrado em {@"C:\temp\dados.txt"}");

        // Handler para SQL (simulado)
        var userId = 123;
        var status = "ativo";
        var sql = CreateSqlQuery($"SELECT * FROM usuarios WHERE id = {userId} AND status = '{status}'");
        _logger.LogInformation("üóÉÔ∏è SQL gerado: {sql}", sql);

        // Handler para logging condicional
        var debug = false;
        DebugLog(debug, $"Debug info: mem√≥ria = {GC.GetTotalMemory(false)} bytes");
        
        debug = true;
        DebugLog(debug, $"Debug info: mem√≥ria = {GC.GetTotalMemory(false)} bytes");
    }

    // Custom handler para logging
    private void LogMessage([InterpolatedStringHandlerArgument("")] LogInterpolatedStringHandler handler)
    {
        if (handler.IsEnabled)
        {
            _logger.LogInformation("üìù [LOG] {message}", handler.GetFormattedText());
        }
    }

    // Custom handler para SQL
    private string CreateSqlQuery([InterpolatedStringHandlerArgument("")] SqlInterpolatedStringHandler handler)
    {
        return handler.GetFormattedText();
    }

    // Handler para debug condicional
    private void DebugLog(bool enabled, [InterpolatedStringHandlerArgument("enabled")] DebugInterpolatedStringHandler handler)
    {
        if (handler.IsEnabled)
        {
            _logger.LogInformation("üêõ [DEBUG] {message}", handler.GetFormattedText());
        }
    }

    private void ExecutarBenchmarks()
    {
        _logger.LogInformation("üìä Executando benchmarks de performance...");

        const int iterations = 100_000;
        var dados = Enumerable.Range(1, 100).ToArray();

        // Benchmark: Concatena√ß√£o vs Interpola√ß√£o vs StringBuilder
        var sw = Stopwatch.StartNew();
        for (int i = 0; i < iterations; i++)
        {
            var _ = "Valor: " + dados[i % dados.Length].ToString();
        }
        sw.Stop();
        var tempoConcatenacao = sw.ElapsedMilliseconds;

        sw.Restart();
        for (int i = 0; i < iterations; i++)
        {
            var _ = $"Valor: {dados[i % dados.Length]}";
        }
        sw.Stop();
        var tempoInterpolacao = sw.ElapsedMilliseconds;

        sw.Restart();
        var sb = new StringBuilder();
        for (int i = 0; i < iterations; i++)
        {
            sb.Clear();
            sb.Append("Valor: ");
            sb.Append(dados[i % dados.Length]);
            var _ = sb.ToString();
        }
        sw.Stop();
        var tempoStringBuilder = sw.ElapsedMilliseconds;

        // Benchmark: StringBuilder vs Interpola√ß√£o para m√∫ltiplas opera√ß√µes
        sw.Restart();
        for (int i = 0; i < iterations / 10; i++)
        {
            var resultado = "";
            for (int j = 0; j < 10; j++)
            {
                resultado += $"Item {j}: {dados[j]}\n";
            }
        }
        sw.Stop();
        var tempoInterpolacaoMultipla = sw.ElapsedMilliseconds;

        sw.Restart();
        var sbMultiplo = new StringBuilder(200);
        for (int i = 0; i < iterations / 10; i++)
        {
            sbMultiplo.Clear();
            for (int j = 0; j < 10; j++)
            {
                sbMultiplo.AppendLine($"Item {j}: {dados[j]}");
            }
            var _ = sbMultiplo.ToString();
        }
        sw.Stop();
        var tempoStringBuilderMultiplo = sw.ElapsedMilliseconds;

        _logger.LogInformation("‚è±Ô∏è Concatena√ß√£o: {tempo}ms", tempoConcatenacao);
        _logger.LogInformation("‚è±Ô∏è Interpola√ß√£o: {tempo}ms", tempoInterpolacao);
        _logger.LogInformation("‚è±Ô∏è StringBuilder: {tempo}ms", tempoStringBuilder);
        _logger.LogInformation("‚è±Ô∏è Interpola√ß√£o m√∫ltipla: {tempo}ms", tempoInterpolacaoMultipla);
        _logger.LogInformation("‚è±Ô∏è StringBuilder m√∫ltiplo: {tempo}ms", tempoStringBuilderMultiplo);

        _logger.LogInformation("üèÜ Para opera√ß√£o √∫nica, interpola√ß√£o √© {melhoria:F1}x mais r√°pida que concatena√ß√£o", 
            (double)tempoConcatenacao / tempoInterpolacao);
        _logger.LogInformation("üèÜ Para m√∫ltiplas opera√ß√µes, StringBuilder √© {melhoria:F1}x mais r√°pido que interpola√ß√£o", 
            (double)tempoInterpolacaoMultipla / tempoStringBuilderMultiplo);
    }

    private void ExibirBoasPraticas()
    {
        Console.WriteLine("‚úÖ Use interpola√ß√£o ($\"\") para strings simples");
        Console.WriteLine("‚úÖ Use StringBuilder para constru√ß√£o iterativa");
        Console.WriteLine("‚úÖ Especifique capacidade inicial no StringBuilder");
        Console.WriteLine("‚úÖ Use formata√ß√£o inline para n√∫meros e datas");
        Console.WriteLine("‚úÖ Combine verbatim (@) com interpola√ß√£o quando necess√°rio");
        Console.WriteLine("‚úÖ Use raw strings (C# 11+) para conte√∫do complexo");
        Console.WriteLine("‚úÖ Implemente handlers customizados para casos especiais");
        Console.WriteLine("‚úÖ Prefira Clear() em vez de new StringBuilder()");
        Console.WriteLine();
        Console.WriteLine("üéØ QUANDO USAR CADA ABORDAGEM");
        Console.WriteLine("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        Console.WriteLine("üîπ Interpola√ß√£o: 1-3 opera√ß√µes de string");
        Console.WriteLine("üîπ StringBuilder: M√∫ltiplas concatena√ß√µes em loop");
        Console.WriteLine("üîπ Custom handlers: Logging condicional, SQL building");
        Console.WriteLine("üîπ Formata√ß√£o avan√ßada: Relat√≥rios, templates");
    }
}

// Modelos de dados
public record Produto(string Nome, decimal Preco, string Categoria);
public record Venda(string Produto, int Quantidade, decimal PrecoUnitario);

// Custom Interpolated String Handlers
[InterpolatedStringHandler]
public ref struct LogInterpolatedStringHandler
{
    private DefaultInterpolatedStringHandler _handler;
    public bool IsEnabled { get; }

    public LogInterpolatedStringHandler(int literalLength, int formattedCount, object receiver)
    {
        IsEnabled = true; // Poderia verificar n√≠vel de log
        _handler = IsEnabled ? new DefaultInterpolatedStringHandler(literalLength, formattedCount) : default;
    }

    public void AppendLiteral(string value)
    {
        if (IsEnabled)
            _handler.AppendLiteral(value);
    }

    public void AppendFormatted<T>(T value)
    {
        if (IsEnabled)
            _handler.AppendFormatted(value);
    }

    public void AppendFormatted<T>(T value, string format)
    {
        if (IsEnabled)
            _handler.AppendFormatted(value, format);
    }

    public string GetFormattedText()
    {
        return IsEnabled ? _handler.ToStringAndClear() : string.Empty;
    }
}

[InterpolatedStringHandler]
public ref struct SqlInterpolatedStringHandler
{
    private DefaultInterpolatedStringHandler _handler;

    public SqlInterpolatedStringHandler(int literalLength, int formattedCount, object receiver)
    {
        _handler = new DefaultInterpolatedStringHandler(literalLength, formattedCount);
    }

    public void AppendLiteral(string value)
    {
        _handler.AppendLiteral(value);
    }

    public void AppendFormatted<T>(T value)
    {
        // Poderia aplicar sanitiza√ß√£o SQL aqui
        _handler.AppendFormatted(value);
    }

    public string GetFormattedText()
    {
        return _handler.ToStringAndClear();
    }
}

[InterpolatedStringHandler]
public ref struct DebugInterpolatedStringHandler
{
    private DefaultInterpolatedStringHandler _handler;
    public bool IsEnabled { get; }

    public DebugInterpolatedStringHandler(int literalLength, int formattedCount, bool enabled)
    {
        IsEnabled = enabled;
        _handler = IsEnabled ? new DefaultInterpolatedStringHandler(literalLength, formattedCount) : default;
    }

    public void AppendLiteral(string value)
    {
        if (IsEnabled)
            _handler.AppendLiteral(value);
    }

    public void AppendFormatted<T>(T value)
    {
        if (IsEnabled)
            _handler.AppendFormatted(value);
    }

    public string GetFormattedText()
    {
        return IsEnabled ? _handler.ToStringAndClear() : string.Empty;
    }
}
