@inject PerformanceMetrics Metrics
@implements IDisposable

<div class="performance-metrics">
    <div class="row">
        <div class="col-md-4">
            <div class="metric-card">
                <h6>Render Time</h6>
                <span class="metric-value">@($"{_renderTime:F2}ms")</span>
            </div>
        </div>
        <div class="col-md-4">
            <div class="metric-card">
                <h6>Component Count</h6>
                <span class="metric-value">@_componentCount</span>
            </div>
        </div>
        <div class="col-md-4">
            <div class="metric-card">
                <h6>Memory Usage</h6>
                <span class="metric-value">@($"{_memoryUsage:F1}MB")</span>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-6">
            <div class="metric-card">
                <h6>Re-renders</h6>
                <span class="metric-value">@_rerenderCount</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="metric-card">
                <h6>JS Interop Calls</h6>
                <span class="metric-value">@_jsInteropCalls</span>
            </div>
        </div>
    </div>
    
    <div class="mt-3">
        <button class="btn btn-primary btn-sm" @onclick="ResetMetrics">
            Reset Metrics
        </button>
        <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="TriggerGC">
            Force GC
        </button>
    </div>
</div>

<style>
    .metric-card {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        padding: 1rem;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #0d6efd;
        display: block;
    }
</style>

@code {
    private double _renderTime;
    private int _componentCount;
    private double _memoryUsage;
    private int _rerenderCount;
    private int _jsInteropCalls;
    private Timer? _updateTimer;

    protected override void OnInitialized()
    {
        Metrics.OnMetricsUpdated += UpdateMetrics;
        
        // Atualiza mÃ©tricas a cada segundo
        _updateTimer = new Timer(async _ => await UpdatePerformanceMetrics(), 
            null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateMetrics()
    {
        _renderTime = Metrics.LastRenderTime;
        _componentCount = Metrics.ComponentCount;
        _memoryUsage = Metrics.MemoryUsageMB;
        _rerenderCount = Metrics.RerenderCount;
        _jsInteropCalls = Metrics.JSInteropCallCount;
        
        InvokeAsync(StateHasChanged);
    }

    private async Task UpdatePerformanceMetrics()
    {
        await Metrics.UpdateMetricsAsync();
    }

    private void ResetMetrics()
    {
        Metrics.Reset();
    }

    private void TriggerGC()
    {
        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();
    }

    public void Dispose()
    {
        Metrics.OnMetricsUpdated -= UpdateMetrics;
        _updateTimer?.Dispose();
    }
}
