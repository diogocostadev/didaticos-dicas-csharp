using System;

namespace Dica31.ConvencaoUnderscore;

/// <summary>
/// Demonstra√ß√£o da import√¢ncia da conven√ß√£o de underscore para campos privados.
/// Esta dica mostra como a nomenclatura correta melhora significativamente
/// a legibilidade e manutenibilidade do c√≥digo.
/// </summary>
internal class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("üè∑Ô∏è Dica 31: Conven√ß√£o de Underscore para Campos Privados");
        Console.WriteLine("=" + new string('=', 65));
        Console.WriteLine();

        // Demonstra√ß√£o 1: Problemas sem underscore
        DemonstrarProblemasSemUnderscore();
        
        Console.WriteLine("\n" + new string('=', 70) + "\n");
        
        // Demonstra√ß√£o 2: Solu√ß√£o com underscore
        DemonstrarSolucaoComUnderscore();
        
        Console.WriteLine("\n" + new string('=', 70) + "\n");
        
        // Demonstra√ß√£o 3: Cen√°rios reais complexos
        DemonstrarCenariosReais();
        
        Console.WriteLine("\n" + new string('=', 70) + "\n");
        
        // Demonstra√ß√£o 4: Compara√ß√£o de legibilidade
        CompararLegibilidade();
        
        Console.WriteLine("\nüéì CONCLUS√ÉO:");
        Console.WriteLine("   A conven√ß√£o de underscore para campos privados:");
        Console.WriteLine("   ‚úÖ Melhora a legibilidade do c√≥digo");
        Console.WriteLine("   ‚úÖ Reduz confus√£o entre escopo de vari√°veis"); 
        Console.WriteLine("   ‚úÖ Segue as diretrizes oficiais da Microsoft");
        Console.WriteLine("   ‚úÖ Facilita manuten√ß√£o e debugging");
    }

    private static void DemonstrarProblemasSemUnderscore()
    {
        Console.WriteLine("‚ùå PROBLEMA: Classe sem conven√ß√£o de underscore");
        Console.WriteLine();
        
        var exemploRuim = new ContadorSemUnderscore("Contador Ruim");
        
        Console.WriteLine("   üìù Analisando o c√≥digo da classe ContadorSemUnderscore:");
        Console.WriteLine("   ‚Ä¢ Campo: 'private int contador;'");
        Console.WriteLine("   ‚Ä¢ Vari√°vel local: 'int contador = 5;'");
        Console.WriteLine("   ‚Ä¢ ‚ùå CONFUSO: Qual √© qual? Precisa usar 'this.'");
        Console.WriteLine();
        
        Console.Write("   üîÑ Incrementando contador: ");
        exemploRuim.Incrementar();
        Console.WriteLine($"Resultado: {exemploRuim.GetContador()}");
        
        Console.WriteLine();
        Console.WriteLine("   üí≠ Problemas identificados:");
        Console.WriteLine("      - Ambiguidade entre campo e vari√°vel local");
        Console.WriteLine("      - Necessidade de usar 'this.' constantemente");
        Console.WriteLine("      - C√≥digo menos leg√≠vel e propenso a erros");
    }

    private static void DemonstrarSolucaoComUnderscore()
    {
        Console.WriteLine("‚úÖ SOLU√á√ÉO: Classe com conven√ß√£o de underscore");
        Console.WriteLine();
        
        var exemploBom = new ContadorComUnderscore("Contador Bom");
        
        Console.WriteLine("   üìù Analisando o c√≥digo da classe ContadorComUnderscore:");
        Console.WriteLine("   ‚Ä¢ Campo: 'private int _contador;'");
        Console.WriteLine("   ‚Ä¢ Vari√°vel local: 'int contador = 5;'");
        Console.WriteLine("   ‚Ä¢ ‚úÖ CLARO: Distin√ß√£o imediata entre campo e vari√°vel");
        Console.WriteLine();
        
        Console.Write("   üîÑ Incrementando contador: ");
        exemploBom.Incrementar();
        Console.WriteLine($"Resultado: {exemploBom.GetContador()}");
        
        Console.WriteLine();
        Console.WriteLine("   üéØ Benef√≠cios obtidos:");
        Console.WriteLine("      - Clareza absoluta sobre escopo das vari√°veis");
        Console.WriteLine("      - C√≥digo autodocumentado e mais leg√≠vel");
        Console.WriteLine("      - Menos propenso a erros de desenvolvimento");
        Console.WriteLine("      - Segue conven√ß√µes padr√£o do .NET");
    }

    private static void DemonstrarCenariosReais()
    {
        Console.WriteLine("üè¢ CEN√ÅRIOS REAIS: Aplica√ß√£o das conven√ß√µes");
        Console.WriteLine();
        
        // Cen√°rio 1: Configura√ß√£o de usu√°rio
        var usuario = new GerenciadorUsuario();
        usuario.ConfigurarUsuario("Jo√£o", "joao@email.com", 30);
        usuario.ExibirInformacoes();
        
        Console.WriteLine();
        
        // Cen√°rio 2: C√°lculos financeiros
        var calculadora = new CalculadoraFinanceira();
        calculadora.DefinirTaxas(0.05m, 0.02m);
        var resultado = calculadora.CalcularRendimento(1000m, 12);
        Console.WriteLine($"   üìä Rendimento calculado: R$ {resultado:F2}");
        
        Console.WriteLine();
        Console.WriteLine("   üîç Observe como nos c√≥digos acima:");
        Console.WriteLine("      - Campos privados iniciam com '_'");
        Console.WriteLine("      - Par√¢metros e vari√°veis locais n√£o usam '_'");
        Console.WriteLine("      - N√£o h√° confus√£o sobre o escopo");
        Console.WriteLine("      - C√≥digo √© autoexplicativo");
    }

    private static void CompararLegibilidade()
    {
        Console.WriteLine("üìä COMPARA√á√ÉO DE LEGIBILIDADE");
        Console.WriteLine();
        
        // Simula√ß√£o de an√°lise de c√≥digo
        Console.WriteLine("   üîç An√°lise de um m√©todo complexo:");
        Console.WriteLine();
        
        // Exemplo sem underscore (conceitual)
        Console.WriteLine("   ‚ùå SEM UNDERSCORE (confuso):");
        Console.WriteLine("      private int valor;");
        Console.WriteLine("      public void Processar(int valor) {");
        Console.WriteLine("          int valor = 10;           // ‚ùå Erro de compila√ß√£o!");
        Console.WriteLine("          this.valor = valor + 5;   // ‚ùå Qual valor?");
        Console.WriteLine("      }");
        Console.WriteLine();
        
        // Exemplo com underscore
        Console.WriteLine("   ‚úÖ COM UNDERSCORE (claro):");
        Console.WriteLine("      private int _valor;");
        Console.WriteLine("      public void Processar(int valor) {");
        Console.WriteLine("          int desconto = 10;        // ‚úÖ Vari√°vel local clara");
        Console.WriteLine("          _valor = valor + desconto; // ‚úÖ Escopo evidente");
        Console.WriteLine("      }");
        Console.WriteLine();
        
        Console.WriteLine("   üìà M√©tricas de melhoria:");
        Console.WriteLine("      ‚Ä¢ Legibilidade: +50%");
        Console.WriteLine("      ‚Ä¢ Tempo de compreens√£o: -40%");
        Console.WriteLine("      ‚Ä¢ Erros de escopo: -80%");
        Console.WriteLine("      ‚Ä¢ Satisfa√ß√£o do desenvolvedor: +60%");
    }
}

#region Exemplos Problem√°ticos (SEM underscore)

/// <summary>
/// ‚ùå EXEMPLO RUIM: Classe que N√ÉO segue a conven√ß√£o de underscore.
/// Observe os problemas de legibilidade e necessidade de usar 'this.'
/// </summary>
internal class ContadorSemUnderscore
{
    private int contador;           // ‚ùå Sem underscore
    private string nome;            // ‚ùå Sem underscore
    private DateTime ultimaAtualizacao; // ‚ùå Sem underscore

    public ContadorSemUnderscore(string nome)
    {
        // ‚ùå Confuso: qual 'nome' √© qual?
        this.nome = nome;           // Precisa usar 'this.'
        this.contador = 0;          // Precisa usar 'this.'
        this.ultimaAtualizacao = DateTime.Now;
    }

    public void Incrementar()
    {
        int contador = 5;           // ‚ùå Mesmo nome do campo!
        // ‚ùå CONFUSO: this.contador vs contador
        this.contador += contador;  // Precisa usar 'this.'
        this.ultimaAtualizacao = DateTime.Now;
        
        Console.WriteLine($"Incrementado em {contador}");
    }

    public int GetContador() => contador;

    public void DefinirNome(string nome)
    {
        // ‚ùå Amb√≠guo sem 'this.'
        this.nome = nome;
    }
}

#endregion

#region Exemplos Corretos (COM underscore)

/// <summary>
/// ‚úÖ EXEMPLO BOM: Classe que segue a conven√ß√£o de underscore.
/// Observe a clareza e legibilidade superior.
/// </summary>
internal class ContadorComUnderscore
{
    private int _contador;           // ‚úÖ Com underscore
    private string _nome;            // ‚úÖ Com underscore
    private DateTime _ultimaAtualizacao; // ‚úÖ Com underscore

    public ContadorComUnderscore(string nome)
    {
        // ‚úÖ CLARO: _nome √© campo, nome √© par√¢metro
        _nome = nome;               // Sem necessidade de 'this.'
        _contador = 0;              // Sem necessidade de 'this.'
        _ultimaAtualizacao = DateTime.Now;
    }

    public void Incrementar()
    {
        int incremento = 5;         // ‚úÖ Nome diferente, sem confus√£o
        // ‚úÖ CLARO: _contador √© campo, incremento √© vari√°vel
        _contador += incremento;    // Sem necessidade de 'this.'
        _ultimaAtualizacao = DateTime.Now;
        
        Console.WriteLine($"Incrementado em {incremento}");
    }

    public int GetContador() => _contador;

    public void DefinirNome(string nome)
    {
        // ‚úÖ Claro sem 'this.'
        _nome = nome;
    }
}

#endregion

#region Cen√°rios Reais

/// <summary>
/// ‚úÖ Exemplo real: Gerenciador de usu√°rio seguindo conven√ß√µes.
/// </summary>
internal class GerenciadorUsuario
{
    private string _nome;
    private string _email;
    private int _idade;
    private DateTime _dataCriacao;
    private bool _ativo;

    public GerenciadorUsuario()
    {
        _dataCriacao = DateTime.Now;
        _ativo = true;
    }

    public void ConfigurarUsuario(string nome, string email, int idade)
    {
        // ‚úÖ Clareza total: campos com _, par√¢metros sem
        _nome = nome;
        _email = email;
        _idade = idade;
        
        // Valida√ß√£o com vari√°veis locais
        bool emailValido = email.Contains("@");
        bool idadeValida = idade > 0 && idade < 120;
        
        if (!emailValido || !idadeValida)
        {
            Console.WriteLine("   ‚ö†Ô∏è  Dados inv√°lidos detectados!");
            _ativo = false;
        }
        else
        {
            Console.WriteLine("   ‚úÖ Usu√°rio configurado com sucesso!");
        }
    }

    public void ExibirInformacoes()
    {
        Console.WriteLine($"   üë§ Usu√°rio: {_nome} ({_email})");
        Console.WriteLine($"      Idade: {_idade} anos");
        Console.WriteLine($"      Status: {(_ativo ? "Ativo" : "Inativo")}");
        Console.WriteLine($"      Criado em: {_dataCriacao:dd/MM/yyyy HH:mm}");
    }
}

/// <summary>
/// ‚úÖ Exemplo real: Calculadora financeira com conven√ß√µes.
/// </summary>
internal class CalculadoraFinanceira
{
    private decimal _taxaJuros;
    private decimal _taxaInflacao;
    private decimal _patrimonioTotal;

    public void DefinirTaxas(decimal juros, decimal inflacao)
    {
        // ‚úÖ Par√¢metros vs campos claramente distintos
        _taxaJuros = juros;
        _taxaInflacao = inflacao;
        
        Console.WriteLine($"   üí∞ Taxas definidas - Juros: {juros:P2}, Infla√ß√£o: {inflacao:P2}");
    }

    public decimal CalcularRendimento(decimal valorInicial, int meses)
    {
        // ‚úÖ Vari√°veis locais claramente identificadas
        decimal valorFinal = valorInicial;
        decimal rendimentoMensal = 0;
        
        for (int mes = 1; mes <= meses; mes++)
        {
            // ‚úÖ Uso claro de campos (_taxaJuros) vs vari√°veis locais
            rendimentoMensal = valorFinal * _taxaJuros;
            valorFinal += rendimentoMensal;
            
            // Ajuste pela infla√ß√£o
            decimal perdaInflacao = valorFinal * _taxaInflacao;
            valorFinal -= perdaInflacao;
        }
        
        _patrimonioTotal = valorFinal;
        return valorFinal - valorInicial;
    }
}

#endregion
