using System.Text;

Console.WriteLine("üöÄ Dica 29: Params com Tipos Enumerable (C# 13)");
Console.WriteLine("================================================");
Console.WriteLine();

Console.WriteLine("‚ö†Ô∏è  NOTA: C# 13 ainda est√° em desenvolvimento.");
Console.WriteLine("üìã Esta dica mostra como ser√° no futuro + alternativas atuais.");
Console.WriteLine();

// Demonstra√ß√£o 1: Compara√ß√£o Array vs ReadOnlySpan (simulado)
Console.WriteLine("üìä 1. Compara√ß√£o: Array vs ReadOnlySpan (Conceitual)");
Console.WriteLine("----------------------------------------------------");

// ‚ùå Forma atual - sempre aloca no heap
Console.WriteLine("‚ùå Array params (heap allocation):");
ProcessArray("Item1", "Item2", "Item3");

// ‚úÖ Forma que ser√° poss√≠vel em C# 13
Console.WriteLine("‚úÖ ReadOnlySpan params (futuro C# 13):");
Console.WriteLine("   // public static void Method(params ReadOnlySpan<string> items)");
ProcessReadOnlySpanSimulated("Item1", "Item2", "Item3");

Console.WriteLine();

// Demonstra√ß√£o 2: Diferentes tipos que ser√£o suportados
Console.WriteLine("üìã 2. Tipos que Ser√£o Suportados em C# 13");
Console.WriteLine("-----------------------------------------");

Console.WriteLine("üîß Span<T> (modific√°vel):");
Console.WriteLine("   // public static void Method(params Span<int> numbers)");
ProcessSpanSimulated(1, 2, 3, 4, 5);

Console.WriteLine("üîí ReadOnlySpan<T> (imut√°vel):");
Console.WriteLine("   // public static void Method(params ReadOnlySpan<int> numbers)");
ProcessReadOnlySpanIntSimulated(10, 20, 30, 40, 50);

Console.WriteLine("üîÑ IEnumerable<T> (flex√≠vel):");
Console.WriteLine("   // public static void Method(params IEnumerable<int> numbers)");
ProcessIEnumerableSimulated(100, 200, 300);

Console.WriteLine("üìù List<T> (familiar):");
Console.WriteLine("   // public static void Method(params List<string> items)");
ProcessListSimulated("A", "B", "C");

Console.WriteLine();

// Demonstra√ß√£o 3: Alternativas atuais
Console.WriteLine("üîß 3. Alternativas Dispon√≠veis Hoje");
Console.WriteLine("-----------------------------------");

Console.WriteLine("ÔøΩ Usando ReadOnlySpan com m√©todos normais:");
ProcessCurrentReadOnlySpan(new ReadOnlySpan<int>([1, 2, 3, 4, 5]));

Console.WriteLine("‚ö° Usando stackalloc:");
ProcessCurrentSpan(stackalloc int[] { 10, 20, 30 });

Console.WriteLine("üéØ Usando array como par√¢metro:");
ProcessCurrentArray([100, 200, 300]);

Console.WriteLine();

// Demonstra√ß√£o 4: Casos de uso pr√°ticos (simulados)
Console.WriteLine("üéØ 4. Casos de Uso Futuros");
Console.WriteLine("--------------------------");

Console.WriteLine("üìù Logging de Alta Performance (futuro):");
Console.WriteLine("   // HighPerformanceLogger.LogValues('User:', 12345, 'Action:', 'Login')");
HighPerformanceLoggerCurrent.LogValues("User: 12345 Action: Login Success: true");

Console.WriteLine("üßÆ C√°lculos Matem√°ticos (futuro):");
Console.WriteLine($"   // M√©dia: {MathUtilsCurrent.Average([1.5, 2.5, 3.5, 4.5])}");

Console.WriteLine("‚úÖ Valida√ß√£o de Dados (futuro):");
Console.WriteLine($"   // Dados v√°lidos: {ValidatorCurrent.AllValid(["Jo√£o", "joao@email.com", "(11) 99999-9999"])}");

Console.WriteLine();

Console.WriteLine("‚úÖ Demonstra√ß√£o conclu√≠da!");
Console.WriteLine("üí° C# 13 params trar√° muito mais flexibilidade e performance!");
Console.WriteLine("üîÆ Por enquanto, use as alternativas mostradas acima.");

// ================================================
// M√âTODOS ATUAIS (C# 8-12)
// ================================================

// ‚ùå Forma atual - Array params
static void ProcessArray(params string[] items)
{
    Console.WriteLine($"   Processando {items.Length} items (heap allocation)");
    foreach (var item in items)
        Console.WriteLine($"   - {item}");
}

// Simula√ß√£o de como ser√° o ReadOnlySpan params
static void ProcessReadOnlySpanSimulated(params string[] items)
{
    var span = new ReadOnlySpan<string>(items);
    Console.WriteLine($"   Processando {span.Length} items (zero allocation - futuro)");
    foreach (var item in span)
        Console.WriteLine($"   - {item}");
}

static void ProcessSpanSimulated(params int[] numbers)
{
    var span = new Span<int>(numbers);
    Console.WriteLine($"   Processando {span.Length} n√∫meros (modific√°vel - futuro):");
    
    // Simula modifica√ß√£o
    for (int i = 0; i < span.Length; i++)
        span[i] *= 2;
    
    foreach (var num in span)
        Console.WriteLine($"   - {num}");
}

static void ProcessReadOnlySpanIntSimulated(params int[] numbers)
{
    var span = new ReadOnlySpan<int>(numbers);
    Console.WriteLine($"   Processando {span.Length} n√∫meros (imut√°vel - futuro):");
    foreach (var num in span)
        Console.WriteLine($"   - {num}");
}

static void ProcessIEnumerableSimulated(params int[] numbers)
{
    IEnumerable<int> enumerable = numbers;
    Console.WriteLine($"   Processando n√∫meros (flex√≠vel - futuro):");
    Console.WriteLine($"   - Soma: {enumerable.Sum()}");
    Console.WriteLine($"   - M√©dia: {enumerable.Average():F2}");
}

static void ProcessListSimulated(params string[] items)
{
    var list = new List<string>(items) { "Extra Item" };
    Console.WriteLine($"   Processando {list.Count} items (list - futuro):");
    
    foreach (var item in list)
        Console.WriteLine($"   - {item}");
}

// ================================================
// M√âTODOS ALTERNATIVOS ATUAIS
// ================================================

static void ProcessCurrentReadOnlySpan(ReadOnlySpan<int> numbers)
{
    Console.WriteLine($"   Processando {numbers.Length} n√∫meros (ReadOnlySpan atual):");
    foreach (var num in numbers)
        Console.WriteLine($"   - {num}");
}

static void ProcessCurrentSpan(Span<int> numbers)
{
    Console.WriteLine($"   Processando {numbers.Length} n√∫meros (Span atual):");
    foreach (var num in numbers)
        Console.WriteLine($"   - {num}");
}

static void ProcessCurrentArray(int[] numbers)
{
    Console.WriteLine($"   Processando {numbers.Length} n√∫meros (array atual):");
    foreach (var num in numbers)
        Console.WriteLine($"   - {num}");
}

// ================================================
// CLASSES UTILIT√ÅRIAS ATUAIS
// ================================================

public static class HighPerformanceLoggerCurrent
{
    public static void LogValues(string message)
    {
        Console.WriteLine($"   LOG: {message}");
    }
}

public static class MathUtilsCurrent
{
    public static double Average(double[] numbers)
    {
        if (numbers.Length == 0) return 0;
        
        double sum = 0;
        foreach (var num in numbers)
            sum += num;
            
        return sum / numbers.Length;
    }
}

public static class ValidatorCurrent
{
    public static bool AllValid(string[] inputs)
    {
        foreach (var input in inputs)
        {
            if (string.IsNullOrWhiteSpace(input))
                return false;
        }
        return true;
    }
}
