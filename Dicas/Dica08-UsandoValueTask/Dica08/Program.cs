using BenchmarkDotNet.Running;

namespace Dica08;

class Program
{
    static void Main(string[] args)
    {
        // Configurar dependency injection
        var host = Host.CreateDefaultBuilder(args)
            .ConfigureServices((context, services) =>
            {
                services.AddSingleton<RecordDemonstration>();
                services.AddSingleton<IPersonService, PersonService>();
                services.AddSingleton<IGeometryService, GeometryService>();
                services.AddSingleton<IFinancialService, FinancialService>();
            })
            .Build();

        var logger = host.Services.GetRequiredService<ILogger<Program>>();

        logger.LogInformation("üöÄ Dica 08: Record Types - Tipos Imut√°veis e Funcionais");
        logger.LogInformation("============================================================");

        try
        {
            // Verificar se deve executar benchmark
            if (args.Length > 0 && args[0].ToLower() == "benchmark")
            {
                logger.LogInformation("Executando benchmarks...");
                BenchmarkRunner.Run<RecordBenchmarks>();
                return;
            }

            // Executar demonstra√ß√µes
            var demonstration = host.Services.GetRequiredService<RecordDemonstration>();

            demonstration.DemonstrateValueEquality();
            demonstration.DemonstrateWithExpressions();
            demonstration.DemonstrateDeconstruction();
            demonstration.DemonstrateRecordInheritance();
            demonstration.DemonstrateRecordStructPerformance();
            demonstration.DemonstrateJsonSerialization();
            demonstration.DemonstratePracticalUseCases();

            logger.LogInformation("\n=== Resumo dos Pontos Importantes ===");
            logger.LogInformation("‚úÖ Record classes:");
            logger.LogInformation("   ‚Ä¢ Compara√ß√£o por valor autom√°tica");
            logger.LogInformation("   ‚Ä¢ Express√µes 'with' para imutabilidade");
            logger.LogInformation("   ‚Ä¢ ToString() autom√°tico e leg√≠vel");
            logger.LogInformation("   ‚Ä¢ Desestrutura√ß√£o nativa");
            logger.LogInformation("   ‚Ä¢ Suporte a heran√ßa");

            logger.LogInformation("\n‚úÖ Record structs:");
            logger.LogInformation("   ‚Ä¢ Melhor performance para dados pequenos");
            logger.LogInformation("   ‚Ä¢ Semanticamente valor, n√£o refer√™ncia");
            logger.LogInformation("   ‚Ä¢ Readonly record struct para m√°xima imutabilidade");

            logger.LogInformation("\n‚úÖ Casos de uso ideais:");
            logger.LogInformation("   ‚Ä¢ DTOs e modelos de transfer√™ncia");
            logger.LogInformation("   ‚Ä¢ Value Objects em Domain-Driven Design");
            logger.LogInformation("   ‚Ä¢ Configura√ß√µes imut√°veis");
            logger.LogInformation("   ‚Ä¢ Estados de aplica√ß√£o");
            logger.LogInformation("   ‚Ä¢ Pattern matching avan√ßado");

            logger.LogInformation("\nüí° Para executar benchmarks: dotnet run benchmark");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Erro durante a execu√ß√£o da demonstra√ß√£o");
        }

        logger.LogInformation("\n‚úÖ Demonstra√ß√£o conclu√≠da!");
    }
}
