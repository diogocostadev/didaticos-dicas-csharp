using System.Diagnostics;
using System.Text.RegularExpressions;

Console.WriteLine("==== Dica 100: Regex Compilados para Performance M√°xima ====\n");

Console.WriteLine("üöÄ Regex COMPILADOS s√£o at√© 10x mais r√°pidos que regex normais!");
Console.WriteLine("Vamos demonstrar quando e como usar para performance m√°xima...\n");

// ===== DEMONSTRA√á√ÉO 1: REGEX NORMAL VS COMPILADO =====
Console.WriteLine("1. Regex Normal vs Compilado - Diferen√ßa de Performance");
Console.WriteLine("--------------------------------------------------------");

// Padr√µes comuns que usaremos
const string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
const string phonePattern = @"^\(\d{3}\)\s\d{3}-\d{4}$";
const string creditCardPattern = @"^\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}$";

// Dados de teste
var emails = GenerateTestEmails(10000);
var phones = GenerateTestPhones(10000);
var creditCards = GenerateTestCreditCards(10000);

Console.WriteLine($"üìä Dataset: {emails.Length:N0} emails, {phones.Length:N0} telefones, {creditCards.Length:N0} cart√µes");

// ===== TESTE 1: REGEX NORMAL (SEM COMPILA√á√ÉO) =====
Console.WriteLine("\n‚ùå Regex NORMAL (sem compila√ß√£o):");
var sw = Stopwatch.StartNew();

var emailRegexNormal = new Regex(emailPattern);
var phoneRegexNormal = new Regex(phonePattern);
var cardRegexNormal = new Regex(creditCardPattern);

int validEmailsNormal = 0, validPhonesNormal = 0, validCardsNormal = 0;

foreach (var email in emails)
    if (emailRegexNormal.IsMatch(email)) validEmailsNormal++;

foreach (var phone in phones)
    if (phoneRegexNormal.IsMatch(phone)) validPhonesNormal++;

foreach (var card in creditCards)
    if (cardRegexNormal.IsMatch(card)) validCardsNormal++;

sw.Stop();
var normalTime = sw.ElapsedMilliseconds;

Console.WriteLine($"   ‚Ä¢ Emails v√°lidos: {validEmailsNormal:N0}");
Console.WriteLine($"   ‚Ä¢ Telefones v√°lidos: {validPhonesNormal:N0}");
Console.WriteLine($"   ‚Ä¢ Cart√µes v√°lidos: {validCardsNormal:N0}");
Console.WriteLine($"   ‚Ä¢ ‚è±Ô∏è  Tempo total: {normalTime} ms");

// ===== TESTE 2: REGEX COMPILADO =====
Console.WriteLine("\n‚úÖ Regex COMPILADO:");
sw.Restart();

var emailRegexCompiled = new Regex(emailPattern, RegexOptions.Compiled);
var phoneRegexCompiled = new Regex(phonePattern, RegexOptions.Compiled);
var cardRegexCompiled = new Regex(creditCardPattern, RegexOptions.Compiled);

int validEmailsCompiled = 0, validPhonesCompiled = 0, validCardsCompiled = 0;

foreach (var email in emails)
    if (emailRegexCompiled.IsMatch(email)) validEmailsCompiled++;

foreach (var phone in phones)
    if (phoneRegexCompiled.IsMatch(phone)) validPhonesCompiled++;

foreach (var card in creditCards)
    if (cardRegexCompiled.IsMatch(card)) validCardsCompiled++;

sw.Stop();
var compiledTime = sw.ElapsedMilliseconds;

Console.WriteLine($"   ‚Ä¢ Emails v√°lidos: {validEmailsCompiled:N0}");
Console.WriteLine($"   ‚Ä¢ Telefones v√°lidos: {validPhonesCompiled:N0}");
Console.WriteLine($"   ‚Ä¢ Cart√µes v√°lidos: {validCardsCompiled:N0}");
Console.WriteLine($"   ‚Ä¢ ‚è±Ô∏è  Tempo total: {compiledTime} ms");

var improvement = normalTime > 0 && compiledTime > 0 ? (double)normalTime / compiledTime : 1;
Console.WriteLine($"\nüöÄ Regex compilado √© {improvement:F1}x mais r√°pido!\n");

// ===== DEMONSTRA√á√ÉO 2: SOURCE GENERATORS (.NET 7+) =====
Console.WriteLine("2. Source Generators - A Evolu√ß√£o dos Regex Compilados");
Console.WriteLine("-------------------------------------------------------");

Console.WriteLine("‚ú® .NET 7+ introduziu Source Generators para Regex!");
Console.WriteLine("   ‚Ä¢ Compila√ß√£o acontece em BUILD TIME");
Console.WriteLine("   ‚Ä¢ Performance ainda melhor que RegexOptions.Compiled");
Console.WriteLine("   ‚Ä¢ An√°lise est√°tica em tempo de compila√ß√£o");
Console.WriteLine("   ‚Ä¢ Detec√ß√£o de erros em tempo de compila√ß√£o\n");

// Demonstra√ß√£o com Source Generator (comentado para compatibilidade)
Console.WriteLine("üìù Exemplo de Source Generator Regex:");
Console.WriteLine("```csharp");
Console.WriteLine("[GeneratedRegex(@\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\")]");
Console.WriteLine("private static partial Regex EmailRegex();");
Console.WriteLine("");
Console.WriteLine("// Uso:");
Console.WriteLine("bool isValid = EmailRegex().IsMatch(email);");
Console.WriteLine("```");
Console.WriteLine("‚ö° Performance superior + valida√ß√£o em compile-time!\n");

// ===== DEMONSTRA√á√ÉO 3: REGEX EST√ÅTICO VS INST√ÇNCIA =====
Console.WriteLine("3. Regex Est√°tico vs Inst√¢ncia - Impacto na Performance");
Console.WriteLine("--------------------------------------------------------");

var testString = "Contact us at support@company.com or sales@company.com for help";
const int iterations = 50000;

// Teste com Regex.IsMatch est√°tico (compila a cada chamada!)
sw.Restart();
int matchesStatic = 0;
for (int i = 0; i < iterations; i++)
{
    if (Regex.IsMatch(testString, emailPattern))
        matchesStatic++;
}
sw.Stop();
var staticTime = sw.ElapsedMilliseconds;

// Teste com inst√¢ncia compilada (compila uma vez)
var compiledRegex = new Regex(emailPattern, RegexOptions.Compiled);
sw.Restart();
int matchesInstance = 0;
for (int i = 0; i < iterations; i++)
{
    if (compiledRegex.IsMatch(testString))
        matchesInstance++;
}
sw.Stop();
var instanceTime = sw.ElapsedMilliseconds;

Console.WriteLine($"‚ùå Regex.IsMatch est√°tico: {staticTime} ms ({matchesStatic:N0} matches)");
Console.WriteLine($"‚úÖ Inst√¢ncia compilada: {instanceTime} ms ({matchesInstance:N0} matches)");

var staticImprovement = staticTime > 0 && instanceTime > 0 ? (double)staticTime / instanceTime : 1;
Console.WriteLine($"‚ö° Inst√¢ncia compilada √© {staticImprovement:F1}x mais r√°pida!\n");

// ===== DEMONSTRA√á√ÉO 4: DIFERENTES OP√á√ïES DE COMPILA√á√ÉO =====
Console.WriteLine("4. Diferentes Op√ß√µes de Regex e seus Impactos");
Console.WriteLine("----------------------------------------------");

var complexText = GenerateComplexText();
const string complexPattern = @"\b[A-Z][a-z]+\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b";

// Regex interpretado (padr√£o)
var interpretedRegex = new Regex(complexPattern);
sw.Restart();
var interpretedMatches = interpretedRegex.Matches(complexText);
sw.Stop();
var interpretedTime = sw.ElapsedMilliseconds;

// Regex compilado
var regexCompiled = new Regex(complexPattern, RegexOptions.Compiled);
sw.Restart();
var compiledMatches = regexCompiled.Matches(complexText);
sw.Stop();
var regexCompiledTime = sw.ElapsedMilliseconds;

// Regex compilado + IgnoreCase
var compiledIgnoreCase = new Regex(complexPattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
sw.Restart();
var ignoreCaseMatches = compiledIgnoreCase.Matches(complexText);
sw.Stop();
var ignoreCaseTime = sw.ElapsedMilliseconds;

Console.WriteLine($"üìä Texto complexo: {complexText.Length:N0} caracteres");
Console.WriteLine($"   ‚Ä¢ Interpretado: {interpretedTime} ms ({interpretedMatches.Count} matches)");
Console.WriteLine($"   ‚Ä¢ Compilado: {regexCompiledTime} ms ({compiledMatches.Count} matches)");
Console.WriteLine($"   ‚Ä¢ Compilado + IgnoreCase: {ignoreCaseTime} ms ({ignoreCaseMatches.Count} matches)");

// ===== DEMONSTRA√á√ÉO 5: CASOS DE USO PR√ÅTICOS =====
Console.WriteLine("\n5. Casos de Uso Pr√°ticos para Regex Compilados");
Console.WriteLine("-----------------------------------------------");

DemonstrateLogParsing();
DemonstrateDataValidation();
DemonstrateTextProcessing();

Console.WriteLine("\n=== RESUMO: Quando Usar Regex Compilados ===");
Console.WriteLine("‚úÖ USE Regex compilados quando:");
Console.WriteLine("   ‚Ä¢ Mesmo padr√£o usado m√∫ltiplas vezes");
Console.WriteLine("   ‚Ä¢ Performance √© cr√≠tica");
Console.WriteLine("   ‚Ä¢ Processamento de grandes volumes de dados");
Console.WriteLine("   ‚Ä¢ APIs ou bibliotecas que processam texto");
Console.WriteLine("   ‚Ä¢ Valida√ß√£o frequente de entrada de usu√°rio");
Console.WriteLine();
Console.WriteLine("üöÄ USE Source Generators (.NET 7+) quando:");
Console.WriteLine("   ‚Ä¢ Padr√µes s√£o conhecidos em tempo de compila√ß√£o");
Console.WriteLine("   ‚Ä¢ Quer m√°xima performance");
Console.WriteLine("   ‚Ä¢ Quer valida√ß√£o em tempo de compila√ß√£o");
Console.WriteLine();
Console.WriteLine("‚ùå EVITE quando:");
Console.WriteLine("   ‚Ä¢ Padr√£o usado apenas uma vez");
Console.WriteLine("   ‚Ä¢ Regex simples ou pequenos volumes");
Console.WriteLine("   ‚Ä¢ Aplica√ß√µes com pouco uso de regex");
Console.WriteLine();
Console.WriteLine("‚ö†Ô∏è  CUIDADO: Compila√ß√£o tem overhead inicial - use apenas se vai reutilizar!");

// ===== M√âTODOS DE APOIO =====

static string[] GenerateTestEmails(int count)
{
    var emails = new string[count];
    var domains = new[] { "gmail.com", "yahoo.com", "company.com", "test.org" };
    var random = new Random(42);
    
    for (int i = 0; i < count; i++)
    {
        var isValid = random.Next(10) > 2; // 70% v√°lidos
        if (isValid)
        {
            emails[i] = $"user{i}@{domains[random.Next(domains.Length)]}";
        }
        else
        {
            emails[i] = $"invalid-email-{i}"; // Email inv√°lido
        }
    }
    return emails;
}

static string[] GenerateTestPhones(int count)
{
    var phones = new string[count];
    var random = new Random(42);
    
    for (int i = 0; i < count; i++)
    {
        var isValid = random.Next(10) > 2; // 70% v√°lidos
        if (isValid)
        {
            phones[i] = $"({random.Next(100, 999)}) {random.Next(100, 999)}-{random.Next(1000, 9999)}";
        }
        else
        {
            phones[i] = $"{random.Next(1000000, 9999999)}"; // Formato inv√°lido
        }
    }
    return phones;
}

static string[] GenerateTestCreditCards(int count)
{
    var cards = new string[count];
    var random = new Random(42);
    
    for (int i = 0; i < count; i++)
    {
        var isValid = random.Next(10) > 2; // 70% v√°lidos
        if (isValid)
        {
            cards[i] = $"{random.Next(1000, 9999)} {random.Next(1000, 9999)} {random.Next(1000, 9999)} {random.Next(1000, 9999)}";
        }
        else
        {
            cards[i] = $"{random.Next(100, 999)}-{random.Next(100, 999)}"; // Formato inv√°lido
        }
    }
    return cards;
}

static string GenerateComplexText()
{
    var text = new System.Text.StringBuilder();
    var random = new Random(42);
    var names = new[] { "John", "Jane", "Bob", "Alice", "Charlie", "Diana" };
    var domains = new[] { "company.com", "test.org", "sample.net" };
    
    for (int i = 0; i < 1000; i++)
    {
        var name = names[random.Next(names.Length)];
        var ip = $"{random.Next(1, 255)}.{random.Next(1, 255)}.{random.Next(1, 255)}.{random.Next(1, 255)}";
        var email = $"user{i}@{domains[random.Next(domains.Length)]}";
        
        text.AppendLine($"{name} {ip} {email} - Log entry {i}");
    }
    
    return text.ToString();
}

static void DemonstrateLogParsing()
{
    Console.WriteLine("üîç Exemplo: Parsing de Logs");
    
    var logRegex = new Regex(
        @"(?<timestamp>\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})\s\[(?<level>\w+)\]\s(?<message>.*)",
        RegexOptions.Compiled);
    
    var logs = new[]
    {
        "2024-01-15 10:30:45 [INFO] User logged in",
        "2024-01-15 10:31:12 [ERROR] Database connection failed",
        "2024-01-15 10:31:45 [WARN] Memory usage high"
    };
    
    foreach (var log in logs)
    {
        var match = logRegex.Match(log);
        if (match.Success)
        {
            Console.WriteLine($"   ‚Ä¢ {match.Groups["level"].Value}: {match.Groups["message"].Value}");
        }
    }
}

static void DemonstrateDataValidation()
{
    Console.WriteLine("\n‚úÖ Exemplo: Valida√ß√£o de Dados");
    
    var validators = new Dictionary<string, Regex>
    {
        ["CPF"] = new Regex(@"^\d{3}\.\d{3}\.\d{3}-\d{2}$", RegexOptions.Compiled),
        ["CEP"] = new Regex(@"^\d{5}-\d{3}$", RegexOptions.Compiled),
        ["Telefone"] = new Regex(@"^\(\d{2}\)\s\d{4,5}-\d{4}$", RegexOptions.Compiled)
    };
    
    var testData = new Dictionary<string, string>
    {
        ["CPF"] = "123.456.789-01",
        ["CEP"] = "01234-567",
        ["Telefone"] = "(11) 98765-4321"
    };
    
    foreach (var (type, value) in testData)
    {
        var isValid = validators[type].IsMatch(value);
        var status = isValid ? "‚úÖ" : "‚ùå";
        Console.WriteLine($"   ‚Ä¢ {type}: {value} {status}");
    }
}

static void DemonstrateTextProcessing()
{
    Console.WriteLine("\nüìù Exemplo: Processamento de Texto");
    
    var text = "Visit https://www.example.com or http://test.org for more info. Email: contact@company.com";
    
    var urlRegex = new Regex(@"https?://[^\s]+", RegexOptions.Compiled);
    var emailRegex = new Regex(@"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", RegexOptions.Compiled);
    
    var urls = urlRegex.Matches(text);
    var emails = emailRegex.Matches(text);
    
    Console.WriteLine($"   ‚Ä¢ URLs encontradas: {urls.Count}");
    foreach (Match url in urls)
        Console.WriteLine($"     - {url.Value}");
    
    Console.WriteLine($"   ‚Ä¢ Emails encontrados: {emails.Count}");
    foreach (Match email in emails)
        Console.WriteLine($"     - {email.Value}");
}
