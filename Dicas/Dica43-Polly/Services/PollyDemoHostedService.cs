using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Dica43_Polly.Services;
using Dica43_Polly.Models;

namespace Dica43_Polly.Services;

/// <summary>
/// Servi√ßo hospedado que demonstra todas as funcionalidades do Polly
/// </summary>
public class PollyDemoHostedService : BackgroundService
{
    private readonly ILogger<PollyDemoHostedService> _logger;
    private readonly ExternalApiService _externalApiService;
    private readonly PaymentService _paymentService;

    public PollyDemoHostedService(
        ILogger<PollyDemoHostedService> logger,
        ExternalApiService externalApiService,
        PaymentService paymentService)
    {
        _logger = logger;
        _externalApiService = externalApiService;
        _paymentService = paymentService;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        try
        {
            _logger.LogInformation("üöÄ Iniciando demonstra√ß√£o do Polly - Padr√µes de Resili√™ncia");
            _logger.LogInformation("=================================================================");
            
            await DemonstrateRetryPolicyAsync();
            await Task.Delay(2000, stoppingToken);
            
            await DemonstrateCircuitBreakerAsync();
            await Task.Delay(2000, stoppingToken);
            
            await DemonstrateCombinedPolicyAsync();
            await Task.Delay(2000, stoppingToken);
            
            await DemonstrateFallbackPolicyAsync();
            await Task.Delay(2000, stoppingToken);
            
            await DemonstrateBulkheadPolicyAsync();
            await Task.Delay(2000, stoppingToken);
            
            await DemonstratePerformanceMeasurementAsync();
            await Task.Delay(2000, stoppingToken);
            
            await ShowBestPracticesAsync();
            
            _logger.LogInformation("=================================================================");
            _logger.LogInformation("‚úÖ Demonstra√ß√£o do Polly conclu√≠da com sucesso!");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro durante demonstra√ß√£o do Polly");
        }
    }

    private async Task DemonstrateRetryPolicyAsync()
    {
        _logger.LogInformation("üìñ 1. Demonstrando Retry Policy com Exponential Backoff");
        _logger.LogInformation("----------------------------------------------------------");
        
        // Testa retry com um post v√°lido
        var result1 = await _externalApiService.GetPostWithRetryAsync(1);
        LogOperationResult("Busca de Post com Retry", result1);
        
        await Task.Delay(1000);
        
        // Testa retry com um post inv√°lido para for√ßar retry
        var result2 = await _externalApiService.GetPostWithRetryAsync(999);
        LogOperationResult("Busca de Post Inv√°lido (Retry)", result2);
    }

    private async Task DemonstrateCircuitBreakerAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("‚ö° 2. Demonstrando Circuit Breaker Pattern");
        _logger.LogInformation("------------------------------------------");
        
        // Primeiro, tenta uma opera√ß√£o normal
        var result1 = await _externalApiService.GetPostsWithCircuitBreakerAsync();
        LogOperationResult("Busca Normal com Circuit Breaker", result1);
        
        await Task.Delay(1000);
        
        // Agora simula falhas para abrir o circuit breaker
        _logger.LogInformation("");
        _logger.LogInformation("üß™ Simulando falhas para abrir o Circuit Breaker:");
        var failureResults = await _externalApiService.SimulateFailuresForCircuitBreakerAsync();
        
        foreach (var result in failureResults)
        {
            var status = result.Success ? "‚úÖ" : "‚ùå";
            _logger.LogInformation("{Status} {Message} ({Duration}ms)", 
                status, result.Data ?? result.ErrorMessage, result.Duration.TotalMilliseconds);
        }
    }

    private async Task DemonstrateCombinedPolicyAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("üõ°Ô∏è 3. Demonstrando Pol√≠tica Combinada (Timeout + Circuit Breaker + Retry)");
        _logger.LogInformation("--------------------------------------------------------------------------");
        
        var result = await _externalApiService.GetCommentWithCombinedPolicyAsync(1);
        LogOperationResult("Busca de Coment√°rio com Pol√≠tica Combinada", result);
    }

    private async Task DemonstrateFallbackPolicyAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("üîÑ 4. Demonstrando Fallback Policy");
        _logger.LogInformation("-----------------------------------");
        
        var result = await _externalApiService.GetPostWithFallbackAsync(1);
        LogOperationResult("Busca com Fallback (for√ßando erro)", result);
        
        if (result.Success && result.Data != null)
        {
            _logger.LogInformation("üìÑ Dados do Fallback:");
            _logger.LogInformation("   T√≠tulo: {Title}", result.Data.Title);
            _logger.LogInformation("   Corpo: {Body}", result.Data.Body);
        }
    }

    private async Task DemonstrateBulkheadPolicyAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("üöß 5. Demonstrando Bulkhead Policy (Controle de Paralelismo)");
        _logger.LogInformation("--------------------------------------------------------------");
        
        // Processa m√∫ltiplos pagamentos para testar o bulkhead
        var results = await _paymentService.ProcessMultiplePaymentsAsync(15);
        
        _logger.LogInformation("");
        _logger.LogInformation("üìä Resultados dos Pagamentos em Lote:");
        
        var successCount = results.Count(r => r.Success);
        var failureCount = results.Count(r => !r.Success && !r.ErrorMessage?.Contains("simult√¢neas") == true);
        var rejectedCount = results.Count(r => r.ErrorMessage?.Contains("simult√¢neas") == true);
        
        _logger.LogInformation("‚úÖ Sucessos: {Success}", successCount);
        _logger.LogInformation("‚ùå Falhas: {Failures}", failureCount);
        _logger.LogInformation("üöß Rejeitados pelo Bulkhead: {Rejected}", rejectedCount);
        
        // Demonstra pagamento cr√≠tico com pol√≠tica abrangente
        _logger.LogInformation("");
        _logger.LogInformation("üíé Processando pagamento cr√≠tico com pol√≠tica abrangente:");
        var criticalResult = await _paymentService.ProcessCriticalPaymentAsync(5000.00m, "CRITICAL-001");
        LogOperationResult("Pagamento Cr√≠tico", criticalResult);
    }

    private async Task DemonstratePerformanceMeasurementAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("üìä 6. Demonstrando Medi√ß√£o de Performance");
        _logger.LogInformation("------------------------------------------");
        
        var (averageLatency, successful, failed) = await _paymentService.MeasurePerformanceAsync(20);
        
        _logger.LogInformation("üìà M√©tricas de Performance:");
        _logger.LogInformation("   Lat√™ncia M√©dia: {Latency}ms", averageLatency.TotalMilliseconds);
        _logger.LogInformation("   Opera√ß√µes Bem-sucedidas: {Success}", successful);
        _logger.LogInformation("   Opera√ß√µes Falhadas: {Failed}", failed);
        _logger.LogInformation("   Taxa de Sucesso: {Rate:P1}", (double)successful / (successful + failed));
    }

    private async Task ShowBestPracticesAsync()
    {
        _logger.LogInformation("");
        _logger.LogInformation("üéØ 7. Melhores Pr√°ticas do Polly");
        _logger.LogInformation("----------------------------------");
        
        _logger.LogInformation("");
        _logger.LogInformation("üåü Resumo das Pol√≠ticas de Resili√™ncia:");
        _logger.LogInformation("");
        
        _logger.LogInformation("üìå Retry Policy:");
        _logger.LogInformation("   ‚úÖ Use para falhas transit√≥rias (network timeouts, HTTP 5xx)");
        _logger.LogInformation("   ‚úÖ Implemente Exponential Backoff com Jitter");
        _logger.LogInformation("   ‚úÖ Limite o n√∫mero de tentativas (3-5)");
        _logger.LogInformation("   üí° Exemplo: Chamadas de API externa, opera√ß√µes de I/O");
        _logger.LogInformation("");
        
        _logger.LogInformation("üìå Circuit Breaker:");
        _logger.LogInformation("   ‚úÖ Protege against cascading failures");
        _logger.LogInformation("   ‚úÖ Permite recupera√ß√£o autom√°tica");
        _logger.LogInformation("   ‚úÖ Monitora health do servi√ßo downstream");
        _logger.LogInformation("   üí° Exemplo: Servi√ßos cr√≠ticos, databases, APIs de terceiros");
        _logger.LogInformation("");
        
        _logger.LogInformation("üìå Timeout Policy:");
        _logger.LogInformation("   ‚úÖ Define limites de tempo claros");
        _logger.LogInformation("   ‚úÖ Evita opera√ß√µes infinitas");
        _logger.LogInformation("   ‚úÖ Use timeouts diferentes por opera√ß√£o");
        _logger.LogInformation("   üí° Exemplo: HTTP requests, database queries");
        _logger.LogInformation("");
        
        _logger.LogInformation("üìå Bulkhead Policy:");
        _logger.LogInformation("   ‚úÖ Isola recursos cr√≠ticos");
        _logger.LogInformation("   ‚úÖ Controla paralelismo");
        _logger.LogInformation("   ‚úÖ Evita resource starvation");
        _logger.LogInformation("   üí° Exemplo: Thread pools, connection pools");
        _logger.LogInformation("");
        
        _logger.LogInformation("üìå Fallback Policy:");
        _logger.LogInformation("   ‚úÖ Fornece resposta alternativa");
        _logger.LogInformation("   ‚úÖ Mant√©m funcionalidade degradada");
        _logger.LogInformation("   ‚úÖ Melhora experi√™ncia do usu√°rio");
        _logger.LogInformation("   üí° Exemplo: Cache, dados padr√£o, mensagens amig√°veis");
        _logger.LogInformation("");
        
        _logger.LogInformation("üèóÔ∏è Arquitetura Recomendada:");
        _logger.LogInformation("   1. Use HttpClientFactory com Polly");
        _logger.LogInformation("   2. Configure pol√≠ticas via DI");
        _logger.LogInformation("   3. Monitore m√©tricas de resili√™ncia");
        _logger.LogInformation("   4. Teste cen√°rios de falha");
        _logger.LogInformation("   5. Documente comportamento esperado");
        _logger.LogInformation("");
        
        _logger.LogInformation("‚ö†Ô∏è  Cuidados Importantes:");
        _logger.LogInformation("   ‚ùå N√£o use retry para erros n√£o transit√≥rios (4xx)");
        _logger.LogInformation("   ‚ùå N√£o configure timeouts muito baixos");
        _logger.LogInformation("   ‚ùå N√£o abuse de circuit breakers");
        _logger.LogInformation("   ‚ùå N√£o ignore logs e m√©tricas");
        _logger.LogInformation("   ‚ùå N√£o esque√ßa de testar em produ√ß√£o");
        
        await Task.CompletedTask;
    }

    private void LogOperationResult<T>(string operation, OperationResult<T> result)
    {
        var status = result.Success ? "‚úÖ" : "‚ùå";
        _logger.LogInformation("{Status} {Operation}:", status, operation);
        _logger.LogInformation("   Sucesso: {Success}", result.Success);
        _logger.LogInformation("   Tentativas: {Attempts}", result.AttemptCount);
        _logger.LogInformation("   Dura√ß√£o: {Duration}ms", result.Duration.TotalMilliseconds);
        _logger.LogInformation("   Pol√≠tica: {Policy}", result.PolicyApplied);
        
        if (!result.Success)
        {
            _logger.LogInformation("   Erro: {Error}", result.ErrorMessage);
        }
        
        if (result.Success && result.Data != null && typeof(T).Name != "String")
        {
            var type = typeof(T);
            if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof(List<>))
            {
                var count = ((System.Collections.IList)result.Data).Count;
                _logger.LogInformation("   Itens retornados: {Count}", count);
            }
        }
    }
}
