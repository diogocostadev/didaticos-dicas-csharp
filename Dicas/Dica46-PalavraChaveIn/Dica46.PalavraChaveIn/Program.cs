using System.Diagnostics;
using System.Runtime.CompilerServices;

Console.WriteLine("=== Dica 46: Palavra-chave 'in' (Passagem de Structs por Refer√™ncia Readonly) ===\n");

// Demonstra√ß√£o 1: Comparando passagem por valor vs 'in'
Console.WriteLine("1. Comparando passagem por valor vs 'in':");
DemonstrarDiferencasPassagem();

Console.WriteLine("\n" + new string('=', 60) + "\n");

// Demonstra√ß√£o 2: Performance com structs grandes
Console.WriteLine("2. Performance com structs grandes:");
DemonstrarPerformanceStructsGrandes();

Console.WriteLine("\n" + new string('=', 60) + "\n");

// Demonstra√ß√£o 3: Readonly structs para m√°xima seguran√ßa
Console.WriteLine("3. Readonly structs para m√°xima seguran√ßa:");
DemonstrarReadonlyStructs();

Console.WriteLine("\n" + new string('=', 60) + "\n");

// Demonstra√ß√£o 4: C√≥pias defensivas (armadilha de performance)
Console.WriteLine("4. C√≥pias defensivas (armadilha de performance):");
DemonstrarCopiasDefensivas();

Console.WriteLine("\n" + new string('=', 60) + "\n");

// Demonstra√ß√£o 5: Casos de uso pr√°ticos
Console.WriteLine("5. Casos de uso pr√°ticos:");
DemonstrarCasosDeUsoPraticos();

Console.WriteLine("\n=== Resumo das Vantagens da Palavra-chave 'in' ===");
Console.WriteLine("‚úÖ Evita c√≥pias desnecess√°rias de structs grandes");
Console.WriteLine("‚úÖ Mant√©m a sem√¢ntica de readonly (m√©todo n√£o pode modificar)");
Console.WriteLine("‚úÖ Performance superior para structs > 16 bytes");
Console.WriteLine("‚úÖ Seguran√ßa de tipos em tempo de compila√ß√£o");
Console.WriteLine("‚úÖ Ideal para c√°lculos matem√°ticos intensivos");
Console.WriteLine("‚ö†Ô∏è  Combine com readonly structs para evitar c√≥pias defensivas");

static void DemonstrarDiferencasPassagem()
{
    Console.WriteLine("  üìä Diferen√ßas na passagem de par√¢metros:");
    
    var pequenaStruct = new PequenaStruct(42, 3.14f);
    var grandeStruct = new GrandeStruct(
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10
    );
    
    Console.WriteLine("\n  Passagem por valor (cria c√≥pia):");
    var resultadoPorValor = ProcessarPorValor(grandeStruct);
    Console.WriteLine($"     Resultado: {resultadoPorValor:F2}");
    
    Console.WriteLine("\n  Passagem por 'in' (refer√™ncia readonly):");
    var resultadoPorIn = ProcessarPorIn(in grandeStruct);
    Console.WriteLine($"     Resultado: {resultadoPorIn:F2}");
    
    Console.WriteLine("\n  üìù Observa√ß√µes:");
    Console.WriteLine("     ‚Ä¢ 'in' evita c√≥pia da struct (melhor performance)");
    Console.WriteLine("     ‚Ä¢ M√©todo n√£o pode modificar a struct original");
    Console.WriteLine("     ‚Ä¢ Compilador garante imutabilidade do par√¢metro");
}

static void DemonstrarPerformanceStructsGrandes()
{
    Console.WriteLine("  ‚ö° Impacto de performance com structs grandes:");
    
    var matriz = new MatrizGrande();
    matriz.InicializarComValoresAleatorios();
    
    const int iteracoes = 100_000;
    
    // Teste por valor (com c√≥pias)
    var sw1 = Stopwatch.StartNew();
    double somaPorValor = 0;
    for (int i = 0; i < iteracoes; i++)
    {
        somaPorValor += CalcularSomaPorValor(matriz);
    }
    sw1.Stop();
    
    // Teste por 'in' (sem c√≥pias)
    var sw2 = Stopwatch.StartNew();
    double somaPorIn = 0;
    for (int i = 0; i < iteracoes; i++)
    {
        somaPorIn += CalcularSomaPorIn(in matriz);
    }
    sw2.Stop();
    
    Console.WriteLine($"     Struct size: {Unsafe.SizeOf<MatrizGrande>()} bytes");
    Console.WriteLine($"     Itera√ß√µes: {iteracoes:N0}");
    Console.WriteLine($"     Por valor: {sw1.ElapsedMilliseconds} ms (soma: {somaPorValor:F0})");
    Console.WriteLine($"     Por 'in':  {sw2.ElapsedMilliseconds} ms (soma: {somaPorIn:F0})");
    Console.WriteLine($"     ‚ö° Speedup: {(double)sw1.ElapsedMilliseconds / sw2.ElapsedMilliseconds:F2}x mais r√°pido");
}

static void DemonstrarReadonlyStructs()
{
    Console.WriteLine("  üîí Readonly structs para eliminar c√≥pias defensivas:");
    
    var pontoMutavel = new PontoMutavel(10, 20);
    var pontoReadonly = new PontoReadonly(10, 20);
    
    Console.WriteLine("\n  Struct mut√°vel (pode gerar c√≥pias defensivas):");
    var distanciaMutavel = CalcularDistanciaOrigemMutavel(in pontoMutavel);
    Console.WriteLine($"     Dist√¢ncia da origem: {distanciaMutavel:F2}");
    
    Console.WriteLine("\n  Readonly struct (sem c√≥pias defensivas):");
    var distanciaReadonly = CalcularDistanciaOrigemReadonly(in pontoReadonly);
    Console.WriteLine($"     Dist√¢ncia da origem: {distanciaReadonly:F2}");
    
    Console.WriteLine("\n  üìù Readonly structs s√£o fundamentais com 'in':");
    Console.WriteLine("     ‚Ä¢ Evitam c√≥pias defensivas desnecess√°rias");
    Console.WriteLine("     ‚Ä¢ Garantem que m√©todos/propriedades n√£o modificam estado");
    Console.WriteLine("     ‚Ä¢ Resultado: Performance real do 'in' parameter");
}

static void DemonstrarCopiasDefensivas()
{
    Console.WriteLine("  ‚ö†Ô∏è  Armadilha: C√≥pias defensivas com structs mut√°veis:");
    
    var estruturaMutavel = new EstruturaMutavel(100, 200);
    
    Console.WriteLine("\n  Quando usar 'in' com struct mut√°vel:");
    Console.WriteLine("     ‚Ä¢ C# pode criar c√≥pias defensivas");
    Console.WriteLine("     ‚Ä¢ Isso acontece ao acessar membros que PODEM modificar");
    Console.WriteLine("     ‚Ä¢ Resultado: Perda de performance do 'in'");
    
    // Demonstrar acesso que pode gerar c√≥pia defensiva
    ProcessarEstruturaMutavel(in estruturaMutavel);
    
    Console.WriteLine("\n  ‚úÖ Solu√ß√£o: Use readonly structs sempre que poss√≠vel");
    Console.WriteLine("  ‚úÖ Alternativa: readonly members em structs mut√°veis");
}

static void DemonstrarCasosDeUsoPraticos()
{
    Console.WriteLine("  üéØ Casos de uso pr√°ticos para 'in':");
    
    Console.WriteLine("\n  1. C√°lculos matem√°ticos com Vector3:");
    var vetor1 = new Vector3D(1.0, 2.0, 3.0);
    var vetor2 = new Vector3D(4.0, 5.0, 6.0);
    
    var produtoEscalar = CalcularProdutoEscalar(in vetor1, in vetor2);
    var distancia = CalcularDistancia(in vetor1, in vetor2);
    
    Console.WriteLine($"     Produto escalar: {produtoEscalar:F2}");
    Console.WriteLine($"     Dist√¢ncia: {distancia:F2}");
    
    Console.WriteLine("\n  2. Processamento de matrizes:");
    var matrizA = new Matriz4x4();
    var matrizB = new Matriz4x4();
    matrizA.InicializarIdentidade();
    matrizB.InicializarComValores(2.0f);
    
    var determinante = CalcularDeterminante(in matrizA);
    Console.WriteLine($"     Determinante matriz identidade: {determinante:F2}");
    
    Console.WriteLine("\n  3. Valida√ß√£o de estruturas grandes:");
    var configuracao = new ConfiguracaoCompleta
    {
        ServidorPrincipal = "localhost",
        Porta = 8080,
        TimeoutConexao = 30000,
        MaximoConexoes = 100
    };
    
    var valida = ValidarConfiguracao(in configuracao);
    Console.WriteLine($"     Configura√ß√£o v√°lida: {valida}");
}

// ===== M√âTODOS DE DEMONSTRA√á√ÉO =====

static double ProcessarPorValor(GrandeStruct estrutura)
{
    // Recebe uma C√ìPIA da struct (custo de performance)
    return estrutura.Campo1 + estrutura.Campo11 + estrutura.Campo20;
}

static double ProcessarPorIn(in GrandeStruct estrutura)
{
    // Recebe uma REFER√äNCIA readonly (zero custo de c√≥pia)
    return estrutura.Campo1 + estrutura.Campo11 + estrutura.Campo20;
}

static double CalcularSomaPorValor(MatrizGrande matriz)
{
    // C√≥pia cara da matriz inteira
    double soma = 0;
    for (int i = 0; i < 100; i++)
    {
        soma += matriz.Valores[i];
    }
    return soma;
}

static double CalcularSomaPorIn(in MatrizGrande matriz)
{
    // Sem c√≥pia - apenas refer√™ncia readonly
    double soma = 0;
    for (int i = 0; i < 100; i++)
    {
        soma += matriz.Valores[i];
    }
    return soma;
}

static double CalcularDistanciaOrigemMutavel(in PontoMutavel ponto)
{
    // PODE gerar c√≥pia defensiva ao acessar propriedades
    return Math.Sqrt(ponto.X * ponto.X + ponto.Y * ponto.Y);
}

static double CalcularDistanciaOrigemReadonly(in PontoReadonly ponto)
{
    // Sem c√≥pia defensiva - struct √© readonly
    return Math.Sqrt(ponto.X * ponto.X + ponto.Y * ponto.Y);
}

static void ProcessarEstruturaMutavel(in EstruturaMutavel estrutura)
{
    // Ao acessar propriedades/m√©todos, C# pode criar c√≥pias defensivas
    var valor = estrutura.Valor; // Pode gerar c√≥pia
    var resultado = estrutura.CalcularAlgumaCoisa(); // Pode gerar c√≥pia
    
    Console.WriteLine($"     Valor processado: {valor}, Resultado: {resultado}");
}

static double CalcularProdutoEscalar(in Vector3D a, in Vector3D b)
{
    return a.X * b.X + a.Y * b.Y + a.Z * b.Z;
}

static double CalcularDistancia(in Vector3D a, in Vector3D b)
{
    var dx = a.X - b.X;
    var dy = a.Y - b.Y;
    var dz = a.Z - b.Z;
    return Math.Sqrt(dx * dx + dy * dy + dz * dz);
}

static float CalcularDeterminante(in Matriz4x4 matriz)
{
    // C√°lculo simplificado para demonstra√ß√£o
    return matriz.M11 * matriz.M22 * matriz.M33 * matriz.M44;
}

static bool ValidarConfiguracao(in ConfiguracaoCompleta config)
{
    return !string.IsNullOrEmpty(config.ServidorPrincipal) &&
           config.Porta > 0 &&
           config.TimeoutConexao > 0 &&
           config.MaximoConexoes > 0;
}

// ===== DEFINI√á√ÉO DAS STRUCTS =====

public struct PequenaStruct
{
    public int Inteiro { get; }
    public float Float { get; }
    
    public PequenaStruct(int inteiro, float @float)
    {
        Inteiro = inteiro;
        Float = @float;
    }
}

public struct GrandeStruct
{
    public int Campo1, Campo2, Campo3, Campo4, Campo5;
    public int Campo6, Campo7, Campo8, Campo9, Campo10;
    public double Campo11, Campo12, Campo13, Campo14, Campo15;
    public double Campo16, Campo17, Campo18, Campo19, Campo20;
    
    public GrandeStruct(int c1, int c2, int c3, int c4, int c5,
                       int c6, int c7, int c8, int c9, int c10,
                       double c11, double c12, double c13, double c14, double c15,
                       double c16, double c17, double c18, double c19, double c20)
    {
        Campo1 = c1; Campo2 = c2; Campo3 = c3; Campo4 = c4; Campo5 = c5;
        Campo6 = c6; Campo7 = c7; Campo8 = c8; Campo9 = c9; Campo10 = c10;
        Campo11 = c11; Campo12 = c12; Campo13 = c13; Campo14 = c14; Campo15 = c15;
        Campo16 = c16; Campo17 = c17; Campo18 = c18; Campo19 = c19; Campo20 = c20;
    }
}

public struct MatrizGrande
{
    public readonly double[] Valores;
    
    public MatrizGrande()
    {
        Valores = new double[100];
    }
    
    public void InicializarComValoresAleatorios()
    {
        for (int i = 0; i < Valores.Length; i++)
        {
            Valores[i] = Random.Shared.NextDouble() * 100;
        }
    }
}

public struct PontoMutavel
{
    public double X { get; set; }
    public double Y { get; set; }
    
    public PontoMutavel(double x, double y)
    {
        X = x;
        Y = y;
    }
}

public readonly struct PontoReadonly
{
    public double X { get; }
    public double Y { get; }
    
    public PontoReadonly(double x, double y)
    {
        X = x;
        Y = y;
    }
}

public struct EstruturaMutavel
{
    public int Valor { get; set; }
    public int OutroValor { get; set; }
    
    public EstruturaMutavel(int valor, int outroValor)
    {
        Valor = valor;
        OutroValor = outroValor;
    }
    
    public int CalcularAlgumaCoisa()
    {
        return Valor * OutroValor;
    }
}

public readonly struct Vector3D
{
    public double X { get; }
    public double Y { get; }
    public double Z { get; }
    
    public Vector3D(double x, double y, double z)
    {
        X = x;
        Y = y;
        Z = z;
    }
}

public struct Matriz4x4
{
    public float M11, M12, M13, M14;
    public float M21, M22, M23, M24;
    public float M31, M32, M33, M34;
    public float M41, M42, M43, M44;
    
    public void InicializarIdentidade()
    {
        M11 = M22 = M33 = M44 = 1.0f;
        M12 = M13 = M14 = M21 = M23 = M24 = 0.0f;
        M31 = M32 = M34 = M41 = M42 = M43 = 0.0f;
    }
    
    public void InicializarComValores(float valor)
    {
        M11 = M12 = M13 = M14 = valor;
        M21 = M22 = M23 = M24 = valor;
        M31 = M32 = M33 = M34 = valor;
        M41 = M42 = M43 = M44 = valor;
    }
}

public struct ConfiguracaoCompleta
{
    public string ServidorPrincipal { get; set; }
    public string ServidorSecundario { get; set; }
    public int Porta { get; set; }
    public int TimeoutConexao { get; set; }
    public int MaximoConexoes { get; set; }
    public bool UsarSSL { get; set; }
    public string CertificadoPath { get; set; }
    public int RetryCount { get; set; }
    public TimeSpan RetryDelay { get; set; }
    public bool LogarDetalhes { get; set; }
}
