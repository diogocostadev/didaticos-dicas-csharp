namespace Dica07.LoggingCorreto;

/// <summary>
/// Dica 7: Logging Correto no .NET
/// 
/// O logger embutido no .NET se refere √† parte de texto do logging como "mensagem", 
/// mas na verdade √© um "modelo de mensagem" (message template).
/// 
/// Usar interpola√ß√£o de string, formata√ß√£o de string ou concatena√ß√£o de string com 
/// seu logger est√° incorreto. Isso faz com que voc√™ perca todos os par√¢metros do 
/// m√©todo de logging (impossibilitando a filtragem) e desperdi√ßa mem√≥ria com strings 
/// que precisam ser coletadas pelo coletor de lixo.
/// 
/// Simplesmente nomeie seus par√¢metros com um nome descritivo como parte do seu modelo 
/// de mensagem e forne√ßa seus argumentos como um segundo par√¢metro. Isso previne 
/// problemas de mem√≥ria e facilita a filtragem.
/// </summary>
public class LoggingDemo
{
    private readonly ILogger<LoggingDemo> _logger;

    public LoggingDemo(ILogger<LoggingDemo> logger)
    {
        _logger = logger;
    }

    public void DemonstrarLoggingIncorreto()
    {
        Console.WriteLine("‚ùå Exemplos de Logging INCORRETO:");
        Console.WriteLine();

        var userId = 12345;
        var userName = "Jo√£o Silva";
        var operation = "Login";
        var duration = TimeSpan.FromMilliseconds(150);

        // ‚ùå INCORRETO: Interpola√ß√£o de string
        _logger.LogInformation($"Usu√°rio {userName} (ID: {userId}) executou opera√ß√£o {operation} em {duration.TotalMilliseconds}ms");

        // ‚ùå INCORRETO: Concatena√ß√£o de string
        _logger.LogInformation("Usu√°rio " + userName + " (ID: " + userId + ") executou opera√ß√£o " + operation + " em " + duration.TotalMilliseconds + "ms");

        // ‚ùå INCORRETO: String.Format
        _logger.LogInformation(string.Format("Usu√°rio {0} (ID: {1}) executou opera√ß√£o {2} em {3}ms", userName, userId, operation, duration.TotalMilliseconds));

        Console.WriteLine("‚ö†Ô∏è Problemas dos m√©todos acima:");
        Console.WriteLine("   ‚Ä¢ Perda de par√¢metros estruturados");
        Console.WriteLine("   ‚Ä¢ Imposs√≠vel filtrar por valores espec√≠ficos");
        Console.WriteLine("   ‚Ä¢ Aloca√ß√£o desnecess√°ria de strings");
        Console.WriteLine("   ‚Ä¢ Coleta de lixo adicional");
        Console.WriteLine("   ‚Ä¢ Performance reduzida");
        Console.WriteLine();
    }

    public void DemonstrarLoggingCorreto()
    {
        Console.WriteLine("‚úÖ Exemplos de Logging CORRETO:");
        Console.WriteLine();

        var userId = 12345;
        var userName = "Jo√£o Silva";
        var operation = "Login";
        var duration = TimeSpan.FromMilliseconds(150);

        // ‚úÖ CORRETO: Message template com par√¢metros nomeados
        _logger.LogInformation("Usu√°rio {UserName} (ID: {UserId}) executou opera√ß√£o {Operation} em {DurationMs}ms",
            userName, userId, operation, duration.TotalMilliseconds);

        // ‚úÖ CORRETO: Diferentes n√≠veis de log com templates
        _logger.LogDebug("Iniciando valida√ß√£o para usu√°rio {UserId}", userId);
        _logger.LogWarning("Tentativa de acesso negada para usu√°rio {UserName} na opera√ß√£o {Operation}", userName, operation);
        _logger.LogError("Erro ao processar opera√ß√£o {Operation} para usu√°rio {UserId}: {ErrorMessage}", operation, userId, "Database timeout");

        Console.WriteLine("‚úÖ Vantagens dos m√©todos acima:");
        Console.WriteLine("   ‚Ä¢ Par√¢metros estruturados preservados");
        Console.WriteLine("   ‚Ä¢ Filtragem eficiente por valores");
        Console.WriteLine("   ‚Ä¢ Zero aloca√ß√µes desnecess√°rias");
        Console.WriteLine("   ‚Ä¢ Performance otimizada");
        Console.WriteLine("   ‚Ä¢ Integra√ß√£o com sistemas de observabilidade");
        Console.WriteLine();
    }

    public void DemonstrarFiltragePorParametros()
    {
        Console.WriteLine("üîç Demonstra√ß√£o de filtragem por par√¢metros:");
        Console.WriteLine();

        // Simulando diferentes opera√ß√µes para mostrar filtragem
        var operations = new[] { "Login", "Logout", "UpdateProfile", "DeleteAccount", "ViewData" };
        var users = new[] { "Jo√£o", "Maria", "Pedro", "Ana", "Carlos" };
        
        for (int i = 0; i < 10; i++)
        {
            var user = users[Random.Shared.Next(users.Length)];
            var operation = operations[Random.Shared.Next(operations.Length)];
            var userId = Random.Shared.Next(1000, 9999);
            var duration = Random.Shared.Next(50, 500);

            _logger.LogInformation("Opera√ß√£o {Operation} executada por {UserName} (ID: {UserId}) em {Duration}ms",
                operation, user, userId, duration);
        }

        Console.WriteLine("üí° Com structured logging, voc√™ pode filtrar logs como:");
        Console.WriteLine("   ‚Ä¢ Todas as opera√ß√µes de 'Login'");
        Console.WriteLine("   ‚Ä¢ Opera√ß√µes do usu√°rio 'Jo√£o'");
        Console.WriteLine("   ‚Ä¢ Opera√ß√µes que duraram mais de 200ms");
        Console.WriteLine("   ‚Ä¢ Combinar m√∫ltiplos filtros");
        Console.WriteLine();
    }

    public void DemonstrarLogScopes()
    {
        Console.WriteLine("üìã Demonstra√ß√£o de Log Scopes:");
        Console.WriteLine();

        var userId = 12345;
        var requestId = Guid.NewGuid();

        // Criando um scope para agrupar logs relacionados
        using (_logger.BeginScope("ProcessingRequest for UserId: {UserId}, RequestId: {RequestId}", userId, requestId))
        {
            _logger.LogInformation("Iniciando processamento da requisi√ß√£o");
            
            // Simular etapas do processamento
            _logger.LogDebug("Validando dados de entrada");
            Thread.Sleep(50);
            
            _logger.LogInformation("Consultando base de dados");
            Thread.Sleep(100);
            
            _logger.LogDebug("Aplicando regras de neg√≥cio");
            Thread.Sleep(75);
            
            _logger.LogInformation("Processamento conclu√≠do com sucesso");
        }

        Console.WriteLine("üí° Scopes ajudam a:");
        Console.WriteLine("   ‚Ä¢ Agrupar logs relacionados");
        Console.WriteLine("   ‚Ä¢ Adicionar contexto automaticamente");
        Console.WriteLine("   ‚Ä¢ Rastrear fluxo de execu√ß√£o");
        Console.WriteLine("   ‚Ä¢ Facilitar debugging");
        Console.WriteLine();
    }

    public void DemonstrarLogEventIds()
    {
        Console.WriteLine("üè∑Ô∏è Demonstra√ß√£o de Event IDs:");
        Console.WriteLine();

        // Definindo EventIds para diferentes tipos de eventos
        var loginSuccessEvent = new EventId(1001, "LoginSuccess");
        var loginFailedEvent = new EventId(1002, "LoginFailed");
        var dataAccessEvent = new EventId(2001, "DataAccess");
        var performanceEvent = new EventId(3001, "Performance");

        var userName = "Jo√£o Silva";
        var userId = 12345;

        _logger.LogInformation(loginSuccessEvent, "Login bem-sucedido para usu√°rio {UserName} (ID: {UserId})", userName, userId);
        _logger.LogWarning(loginFailedEvent, "Falha no login para usu√°rio {UserName} - tentativa {Attempt}", userName, 3);
        _logger.LogInformation(dataAccessEvent, "Acesso aos dados do usu√°rio {UserId} na tabela {TableName}", userId, "Users");
        _logger.LogWarning(performanceEvent, "Opera√ß√£o lenta detectada - {Operation} levou {Duration}ms", "DatabaseQuery", 2500);

        Console.WriteLine("üí° Event IDs permitem:");
        Console.WriteLine("   ‚Ä¢ Categoriza√ß√£o de logs");
        Console.WriteLine("   ‚Ä¢ Filtragem por tipo de evento");
        Console.WriteLine("   ‚Ä¢ Alertas espec√≠ficos");
        Console.WriteLine("   ‚Ä¢ M√©tricas por categoria");
        Console.WriteLine();
    }

    public void DemonstrarLoggerFactoryCustom()
    {
        Console.WriteLine("‚öôÔ∏è Demonstra√ß√£o de Logger personalizado:");
        Console.WriteLine();

        // Criando um logger factory personalizado
        using var loggerFactory = LoggerFactory.Create(builder =>
            builder
                .AddConsole()
                .SetMinimumLevel(LogLevel.Debug)
                .AddFilter("Dica07.LoggingCorreto", LogLevel.Information));

        var customLogger = loggerFactory.CreateLogger<LoggingDemo>();

        customLogger.LogDebug("Este log de debug ser√° filtrado");
        customLogger.LogInformation("Este log de informa√ß√£o ser√° exibido para usu√°rio {UserName}", "Maria");
        customLogger.LogWarning("Este log de warning ser√° exibido com prioridade {Priority}", "Alta");

        Console.WriteLine("üí° Configura√ß√£o de logger permite:");
        Console.WriteLine("   ‚Ä¢ Controlar n√≠veis de log");
        Console.WriteLine("   ‚Ä¢ Filtrar por namespace/categoria");
        Console.WriteLine("   ‚Ä¢ Configurar m√∫ltiplos providers");
        Console.WriteLine("   ‚Ä¢ Otimizar performance");
        Console.WriteLine();
    }

    public void CompararPerformance()
    {
        Console.WriteLine("‚ö° Compara√ß√£o de Performance:");
        Console.WriteLine();

        var iterations = 100000;
        var userName = "TestUser";
        var userId = 12345;

        // Teste com string interpolation (INCORRETO)
        var sw1 = Stopwatch.StartNew();
        for (int i = 0; i < iterations; i++)
        {
            var message = $"Usu√°rio {userName} (ID: {userId}) executou opera√ß√£o Login";
            // Simula o processamento do log
            _ = message.Length;
        }
        sw1.Stop();

        // Teste com message template (CORRETO)
        var sw2 = Stopwatch.StartNew();
        for (int i = 0; i < iterations; i++)
        {
            // Em um logger real, isso seria muito mais eficiente
            var template = "Usu√°rio {UserName} (ID: {UserId}) executou opera√ß√£o {Operation}";
            var parameters = new object[] { userName, userId, "Login" };
            // Simula o processamento do template
            _ = template.Length + parameters.Length;
        }
        sw2.Stop();

        Console.WriteLine($"üîÑ Interpola√ß√£o de string: {sw1.ElapsedMilliseconds}ms");
        Console.WriteLine($"‚úÖ Message template: {sw2.ElapsedMilliseconds}ms");
        Console.WriteLine($"üìä Diferen√ßa: {(double)sw1.ElapsedMilliseconds / sw2.ElapsedMilliseconds:F2}x mais r√°pido");
        Console.WriteLine();
        Console.WriteLine("üí° Na pr√°tica, a diferen√ßa √© ainda maior porque:");
        Console.WriteLine("   ‚Ä¢ Logger real evita aloca√ß√µes desnecess√°rias");
        Console.WriteLine("   ‚Ä¢ Templates s√£o reutilizados");
        Console.WriteLine("   ‚Ä¢ Menos press√£o no Garbage Collector");
    }
}
