using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Dica81_OptionsPattern.Services;

namespace Dica81_OptionsPattern.Services;

/// <summary>
/// Servi√ßo principal que demonstra todos os padr√µes de Options
/// </summary>
public class DemoHostedService : BackgroundService
{
    private readonly ILogger<DemoHostedService> _logger;
    private readonly DatabaseService _databaseService;
    private readonly EmailService _emailService;
    private readonly ApiService _apiService;
    private readonly CacheService _cacheService;
    private readonly ValidationService _validationService;
    private readonly IHostApplicationLifetime _lifetime;

    public DemoHostedService(
        ILogger<DemoHostedService> logger,
        DatabaseService databaseService,
        EmailService emailService,
        ApiService apiService,
        CacheService cacheService,
        ValidationService validationService,
        IHostApplicationLifetime lifetime)
    {
        _logger = logger;
        _databaseService = databaseService;
        _emailService = emailService;
        _apiService = apiService;
        _cacheService = cacheService;
        _validationService = validationService;
        _lifetime = lifetime;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        try
        {
            _logger.LogInformation("üöÄ Iniciando demonstra√ß√£o do Options Pattern");
            _logger.LogInformation("=" + new string('=', 60));

            await DemonstrateAllOptionsPatterns();

            _logger.LogInformation("=" + new string('=', 60));
            _logger.LogInformation("‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå Erro durante a demonstra√ß√£o");
        }
        finally
        {
            // Para a aplica√ß√£o
            _lifetime.StopApplication();
        }
    }

    private async Task DemonstrateAllOptionsPatterns()
    {
        await Task.Delay(500); // Simula inicializa√ß√£o

        // 1. Demonstrar IOptions (Singleton)
        _logger.LogInformation("üìñ 1. Demonstrando IOptions<T> (Singleton)");
        _logger.LogInformation(new string('-', 50));
        
        var dbInfo = await _databaseService.GetConnectionInfoAsync();
        _logger.LogInformation("{DatabaseInfo}", dbInfo);

        await Task.Delay(1000);

        // 2. Demonstrar IOptionsSnapshot (Scoped)
        _logger.LogInformation("\nüìß 2. Demonstrando IOptionsSnapshot<T> (Scoped)");
        _logger.LogInformation(new string('-', 50));
        
        var emailResult = await _emailService.SendEmailAsync(
            "usuario@exemplo.com",
            "Teste do Options Pattern",
            "Este √© um email de teste para demonstrar IOptionsSnapshot.");
        _logger.LogInformation("{EmailResult}", emailResult);

        await Task.Delay(1000);

        // 3. Demonstrar IOptionsMonitor (Singleton com reload)
        _logger.LogInformation("\nüåê 3. Demonstrando IOptionsMonitor<T> (Singleton com reload)");
        _logger.LogInformation(new string('-', 50));
        
        var apiResult = await _apiService.CallApiAsync("users/123");
        _logger.LogInformation("{ApiResult}", apiResult);

        await Task.Delay(1000);

        // 4. Demonstrar configura√ß√µes complexas aninhadas
        _logger.LogInformation("\nüíæ 4. Demonstrando Configura√ß√µes Complexas Aninhadas");
        _logger.LogInformation(new string('-', 50));
        
        var cacheInfo = await _cacheService.GetCacheInfoAsync();
        _logger.LogInformation("{CacheInfo}", cacheInfo);

        await Task.Delay(1000);

        // 5. Demonstrar valida√ß√£o de configura√ß√µes
        _logger.LogInformation("\nüîç 5. Demonstrando Valida√ß√£o de Configura√ß√µes");
        _logger.LogInformation(new string('-', 50));
        
        // Nota: Para demonstration completa da valida√ß√£o, seria necess√°rio acessar IOptions diretamente
        // Este √© um exemplo simplificado
        _logger.LogInformation("‚ÑπÔ∏è  Valida√ß√£o seria executada durante a inicializa√ß√£o da aplica√ß√£o");
        _logger.LogInformation("‚ÑπÔ∏è  Configure services.AddOptions<T>().ValidateDataAnnotations() para valida√ß√£o autom√°tica");

        await Task.Delay(1000);

        // 6. Demonstrar diferen√ßas entre os tipos
        _logger.LogInformation("\nüìã 6. Resumo das Diferen√ßas");
        _logger.LogInformation(new string('-', 50));
        
        var summary = """
                     
                     üîç Diferen√ßas entre IOptions, IOptionsSnapshot e IOptionsMonitor:
                     
                     üìå IOptions<T>:
                        ‚úÖ Singleton - Uma inst√¢ncia para toda a aplica√ß√£o
                        ‚ùå N√ÉO reflete mudan√ßas na configura√ß√£o ap√≥s inicializa√ß√£o
                        üéØ Use para: Configura√ß√µes que n√£o mudam durante execu√ß√£o
                        üí° Exemplo: Configura√ß√µes de banco de dados
                     
                     üìå IOptionsSnapshot<T>:
                        ‚úÖ Scoped - Nova inst√¢ncia por request/scope
                        ‚úÖ Reflete mudan√ßas na configura√ß√£o
                        üéØ Use para: Configura√ß√µes que podem mudar por request
                        üí° Exemplo: Configura√ß√µes por tenant em apps multi-tenant
                     
                     üìå IOptionsMonitor<T>:
                        ‚úÖ Singleton - Uma inst√¢ncia para toda a aplica√ß√£o
                        ‚úÖ Reflete mudan√ßas na configura√ß√£o em tempo real
                        ‚úÖ Permite registrar callbacks para mudan√ßas
                        üéØ Use para: Configura√ß√µes que mudam em runtime
                        üí° Exemplo: Configura√ß√µes de features flags, APIs externas
                     
                     üìã Valida√ß√£o:
                        ‚úÖ Use DataAnnotations para valida√ß√£o b√°sica
                        ‚úÖ Use IValidateOptions<T> para valida√ß√£o complexa
                        ‚úÖ Configure .ValidateDataAnnotations() na startup
                        üí° Falha na valida√ß√£o = ApplicationException na startup
                     """;
        
        _logger.LogInformation("{Summary}", summary);

        await Task.Delay(2000);

        // 7. Demonstrar boas pr√°ticas
        _logger.LogInformation("\nüéØ 7. Boas Pr√°ticas do Options Pattern");
        _logger.LogInformation(new string('-', 50));
        
        var bestPractices = """
                           
                           üåü Boas Pr√°ticas para Options Pattern:
                           
                           1. üìù Naming Convention:
                              - Use sufixo "Settings" nas classes (ex: DatabaseSettings)
                              - Defina const SectionName para cada classe
                           
                           2. üõ°Ô∏è Valida√ß√£o:
                              - Sempre valide configura√ß√µes cr√≠ticas
                              - Use [Required] para propriedades obrigat√≥rias
                              - Implemente valida√ß√£o customizada quando necess√°rio
                           
                           3. üîí Seguran√ßa:
                              - NUNCA loggue senhas ou chaves de API
                              - Use User Secrets para desenvolvimento
                              - Use Azure Key Vault ou similar para produ√ß√£o
                           
                           4. üèóÔ∏è Estrutura:
                              - Organize configura√ß√µes em se√ß√µes l√≥gicas
                              - Use classes separadas para configura√ß√µes complexas
                              - Mantenha configura√ß√µes relacionadas juntas
                           
                           5. ‚ö° Performance:
                              - Use IOptions para configura√ß√µes est√°ticas
                              - Use IOptionsSnapshot apenas quando necess√°rio
                              - Use IOptionsMonitor para configura√ß√µes din√¢micas
                           
                           6. üß™ Testabilidade:
                              - Crie configura√ß√µes de teste
                              - Use Options.Create<T>() nos testes
                              - Teste cen√°rios de configura√ß√£o inv√°lida
                           """;
        
        _logger.LogInformation("{BestPractices}", bestPractices);
    }
}
