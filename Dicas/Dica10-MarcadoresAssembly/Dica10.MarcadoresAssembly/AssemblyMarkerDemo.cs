namespace Dica10.MarcadoresAssembly;

/// <summary>
/// Dica 10: Marcadores de Assembly para Inje√ß√£o de Depend√™ncia
/// 
/// Ao registrar bibliotecas como MediatR ou AutoMapper na Inje√ß√£o de Depend√™ncia 
/// que aceitam um tipo gen√©rico como marcador de assembly, as pessoas geralmente 
/// usam o arquivo Program.cs.
/// 
/// Uma abordagem melhor √© criar uma interface vazia nomeada ap√≥s o assembly em 
/// que ela reside e us√°-la como marcador. Isso remove a ambiguidade e torna o 
/// c√≥digo mais leg√≠vel.
/// </summary>
public class AssemblyMarkerDemo
{
    public static void DemonstrarRegistroIncorreto()
    {
        Console.WriteLine("‚ùå Abordagem INCORRETA - Usando Program.cs como marcador:");
        Console.WriteLine();

        Console.WriteLine("```csharp");
        Console.WriteLine("// ‚ùå PROBLEM√ÅTICO: Usar Program.cs como marcador");
        Console.WriteLine("builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblyContaining<Program>());");
        Console.WriteLine("builder.Services.AddAutoMapper(typeof(Program));");
        Console.WriteLine("builder.Services.AddValidatorsFromAssemblyContaining<Program>();");
        Console.WriteLine("```");
        Console.WriteLine();

        Console.WriteLine("‚ö†Ô∏è Problemas desta abordagem:");
        Console.WriteLine("   ‚Ä¢ Ambiguidade - qual assembly est√° sendo referenciado?");
        Console.WriteLine("   ‚Ä¢ Program.cs pode n√£o estar no assembly correto");
        Console.WriteLine("   ‚Ä¢ Dificulta refatora√ß√£o e manuten√ß√£o");
        Console.WriteLine("   ‚Ä¢ Cria depend√™ncia do assembly de entrada");
        Console.WriteLine("   ‚Ä¢ Pode quebrar se Program.cs for movido/renomeado");
        Console.WriteLine();
    }

    public static void DemonstrarRegistroCorreto()
    {
        Console.WriteLine("‚úÖ Abordagem CORRETA - Usando interface marcadora:");
        Console.WriteLine();

        Console.WriteLine("```csharp");
        Console.WriteLine("// ‚úÖ CORRETO: Usar interface marcadora espec√≠fica do assembly");
        Console.WriteLine("builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblyContaining<IAssemblyMarker>());");
        Console.WriteLine("builder.Services.AddAutoMapper(typeof(IAssemblyMarker));");
        Console.WriteLine("builder.Services.AddValidatorsFromAssemblyContaining<IAssemblyMarker>();");
        Console.WriteLine("```");
        Console.WriteLine();

        Console.WriteLine("‚úÖ Vantagens desta abordagem:");
        Console.WriteLine("   ‚Ä¢ Clara inten√ß√£o - IAssemblyMarker indica o assembly espec√≠fico");
        Console.WriteLine("   ‚Ä¢ Independente do ponto de entrada da aplica√ß√£o");
        Console.WriteLine("   ‚Ä¢ Facilita refatora√ß√£o sem quebrar registros");
        Console.WriteLine("   ‚Ä¢ Auto-documentado - nome da interface indica prop√≥sito");
        Console.WriteLine("   ‚Ä¢ Reutiliz√°vel em diferentes contextos");
        Console.WriteLine();
    }

    public static void DemonstrarExemplosReais()
    {
        Console.WriteLine("üîß Exemplos de configura√ß√£o com marcadores:");
        Console.WriteLine();

        var exemplos = new Dictionary<string, string[]>
        {
            ["MediatR"] = new[]
            {
                "// Registra todos os handlers, behaviors e validators do assembly",
                "services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblyContaining<IAssemblyMarker>());"
            },
            ["AutoMapper"] = new[]
            {
                "// Registra todos os profiles de mapeamento do assembly",
                "services.AddAutoMapper(typeof(IAssemblyMarker));"
            },
            ["FluentValidation"] = new[]
            {
                "// Registra todos os validadores do assembly",
                "services.AddValidatorsFromAssemblyContaining<IAssemblyMarker>();"
            },
            ["Scrutor (Scan)"] = new[]
            {
                "// Registra servi√ßos usando Scrutor",
                "services.Scan(scan => scan",
                "    .FromAssemblyOf<IAssemblyMarker>()",
                "    .AddClasses()",
                "    .AsImplementedInterfaces()",
                "    .WithScopedLifetime());"
            }
        };

        foreach (var exemplo in exemplos)
        {
            Console.WriteLine($"üì¶ {exemplo.Key}:");
            foreach (var linha in exemplo.Value)
            {
                Console.WriteLine($"   {linha}");
            }
            Console.WriteLine();
        }
    }

    public static void DemonstrarPadroesNomeacao()
    {
        Console.WriteLine("üìù Padr√µes de nomenclatura para marcadores:");
        Console.WriteLine();

        var padroes = new[]
        {
            new { Nome = "IAssemblyMarker", Descri√ß√£o = "Gen√©rico, funciona para qualquer assembly" },
            new { Nome = "IApplicationMarker", Descri√ß√£o = "Para assembly de aplica√ß√£o/neg√≥cio" },
            new { Nome = "IInfrastructureMarker", Descri√ß√£o = "Para assembly de infraestrutura" },
            new { Nome = "IDomainMarker", Descri√ß√£o = "Para assembly de dom√≠nio" },
            new { Nome = "IWebApiMarker", Descri√ß√£o = "Para assembly de Web API" },
            new { Nome = "IDataMarker", Descri√ß√£o = "Para assembly de acesso a dados" }
        };

        foreach (var padrao in padroes)
        {
            Console.WriteLine($"üè∑Ô∏è {padrao.Nome}:");
            Console.WriteLine($"   {padrao.Descri√ß√£o}");
            Console.WriteLine();
        }

        Console.WriteLine("üí° Dica: Use nomes que reflitam claramente o prop√≥sito do assembly");
        Console.WriteLine();
    }

    public static void DemonstrarMultiplosAssemblies()
    {
        Console.WriteLine("üèóÔ∏è Trabalhando com m√∫ltiplos assemblies:");
        Console.WriteLine();

        Console.WriteLine("```csharp");
        Console.WriteLine("// Registrar de m√∫ltiplos assemblies");
        Console.WriteLine("builder.Services.AddMediatR(cfg => cfg");
        Console.WriteLine("    .RegisterServicesFromAssemblyContaining<IApplicationMarker>()");
        Console.WriteLine("    .RegisterServicesFromAssemblyContaining<IDomainMarker>()");
        Console.WriteLine("    .RegisterServicesFromAssemblyContaining<IInfrastructureMarker>());");
        Console.WriteLine();
        Console.WriteLine("builder.Services.AddAutoMapper(");
        Console.WriteLine("    typeof(IApplicationMarker),");
        Console.WriteLine("    typeof(IDomainMarker),");
        Console.WriteLine("    typeof(IInfrastructureMarker));");
        Console.WriteLine("```");
        Console.WriteLine();

        Console.WriteLine("‚úÖ Benef√≠cios:");
        Console.WriteLine("   ‚Ä¢ Organiza√ß√£o clara por responsabilidade");
        Console.WriteLine("   ‚Ä¢ Facilita arquitetura em camadas");
        Console.WriteLine("   ‚Ä¢ Permite evolu√ß√£o independente dos assemblies");
        Console.WriteLine("   ‚Ä¢ Melhora testabilidade e manutenibilidade");
        Console.WriteLine();
    }

    public static void DemonstrarAlternativas()
    {
        Console.WriteLine("üîÑ Alternativas aos marcadores:");
        Console.WriteLine();

        var alternativas = new[]
        {
            new 
            { 
                M√©todo = "Assembly.GetExecutingAssembly()", 
                Uso = "Assembly.GetExecutingAssembly()",
                Pr√≥s = "N√£o requer marcador", 
                Contras = "Pode ser amb√≠guo em contexto DI" 
            },
            new 
            { 
                M√©todo = "typeof(ClasseEspec√≠fica)", 
                Uso = "typeof(UserProfile)",
                Pr√≥s = "Usa classe existente", 
                Contras = "Acoplamento com classe espec√≠fica" 
            },
            new 
            { 
                M√©todo = "string assembly name", 
                Uso = "\"Dica10.MarcadoresAssembly\"",
                Pr√≥s = "Expl√≠cito", 
                Contras = "Fr√°gil a renomea√ß√µes, type-unsafe" 
            }
        };

        foreach (var alt in alternativas)
        {
            Console.WriteLine($"‚öôÔ∏è {alt.M√©todo}:");
            Console.WriteLine($"   Uso: {alt.Uso}");
            Console.WriteLine($"   ‚úÖ Pr√≥s: {alt.Pr√≥s}");
            Console.WriteLine($"   ‚ùå Contras: {alt.Contras}");
            Console.WriteLine();
        }

        Console.WriteLine("üéØ Conclus√£o: Marcadores dedicados oferecem o melhor equil√≠brio");
        Console.WriteLine("   entre clareza, manutenibilidade e type-safety.");
        Console.WriteLine();
    }
}
