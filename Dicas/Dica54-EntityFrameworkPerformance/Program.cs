using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Diagnostics;
using Dica54_EntityFrameworkPerformance.Data;
using Dica54_EntityFrameworkPerformance.Models;
using Dica54_EntityFrameworkPerformance.Services;

var builder = WebApplication.CreateBuilder(args);

// ==========================================
// CONFIGURA√á√ÉO DO ENTITY FRAMEWORK
// ==========================================

// Configurar Entity Framework com InMemory para demonstra√ß√µes
builder.Services.AddDbContext<BlogContext>(options =>
{
    options.UseInMemoryDatabase("PerformanceDemo")
           .EnableSensitiveDataLogging() // Para debug
           .EnableDetailedErrors()       // Para debug
           .LogTo(Console.WriteLine, LogLevel.Information); // Log das queries
});

// Registrar servi√ßos
builder.Services.AddScoped<PerformanceDemoService>();
builder.Services.AddScoped<DataSeedService>();

// Configura√ß√£o de logging
builder.Services.AddLogging(builder =>
{
    builder.AddConsole();
    builder.SetMinimumLevel(LogLevel.Information);
});

// Swagger para documenta√ß√£o
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// ==========================================
// CONFIGURA√á√ÉO DO PIPELINE
// ==========================================

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

// ==========================================
// INICIALIZA√á√ÉO DOS DADOS
// ==========================================

using (var scope = app.Services.CreateScope())
{
    var seedService = scope.ServiceProvider.GetRequiredService<DataSeedService>();
    await seedService.SeedDataAsync();
    
    var statistics = await seedService.GetDatabaseStatistics();
    Console.WriteLine(statistics);
}

// ==========================================
// ENDPOINTS DE DEMONSTRA√á√ÉO
// ==========================================

var logger = app.Services.GetRequiredService<ILogger<Program>>();

app.MapGet("/", () => """
üéØ Dica 54: Entity Framework Performance - Demonstra√ß√µes Dispon√≠veis

üìä COMPARA√á√ïES DE PERFORMANCE:
‚Ä¢ GET /demo/n1-problem          - Demonstra problema N+1
‚Ä¢ GET /demo/eager-loading       - Solu√ß√£o com Eager Loading
‚Ä¢ GET /demo/projection          - Solu√ß√£o com Proje√ß√£o (mais eficiente)

üìà CONSULTAS COMPLEXAS:
‚Ä¢ GET /demo/statistics-slow     - Estat√≠sticas sem otimiza√ß√£o
‚Ä¢ GET /demo/statistics-fast     - Estat√≠sticas otimizadas

üìÑ PAGINA√á√ÉO:
‚Ä¢ GET /demo/pagination-skip     - Pagina√ß√£o com Skip/Take (p√°gina 10)
‚Ä¢ GET /demo/pagination-cursor   - Pagina√ß√£o com Cursor (mais eficiente)

üéØ TRACKING:
‚Ä¢ GET /demo/with-tracking       - Consulta com tracking
‚Ä¢ GET /demo/no-tracking         - Consulta sem tracking (read-only)

üí• CARTESIAN EXPLOSION:
‚Ä¢ GET /demo/cartesian-explosion - Problema com m√∫ltiplos includes
‚Ä¢ GET /demo/split-queries       - Solu√ß√£o com Split Queries

‚ö° BULK OPERATIONS:
‚Ä¢ POST /demo/update-individual  - Updates individuais (lento)
‚Ä¢ POST /demo/update-bulk        - Bulk update (eficiente)

üìä BENCHMARK COMPLETO:
‚Ä¢ GET /demo/benchmark           - Executa todos os testes comparativos

üìà INFORMA√á√ïES:
‚Ä¢ GET /demo/statistics          - Estat√≠sticas do banco de dados

üéÆ Acesse /swagger para documenta√ß√£o completa da API
""")
.WithTags("Home")
.WithSummary("P√°gina inicial com todas as demonstra√ß√µes dispon√≠veis");

// ==========================================
// DEMONSTRA√á√ïES DE PROBLEMA N+1
// ==========================================

app.MapGet("/demo/n1-problem", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Problema N+1");
    var result = await service.GetPostsWithN1Problem();
    return Results.Ok(new { 
        message = "Consulta executada com problema N+1 - verifique os logs para ver as m√∫ltiplas queries geradas",
        postsReturned = result.Count,
        warning = "‚ö†Ô∏è Esta implementa√ß√£o gera uma query adicional para cada post!"
    });
})
.WithTags("N+1 Problem")
.WithSummary("Demonstra o problema N+1 - m√∫ltiplas queries desnecess√°rias");

app.MapGet("/demo/eager-loading", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Eager Loading");
    var result = await service.GetPostsWithEagerLoading();
    return Results.Ok(new { 
        message = "Consulta executada com Eager Loading - uma √∫nica query com JOINs",
        postsReturned = result.Count,
        optimization = "‚úÖ Solu√ß√£o: Include() para carregar dados relacionados em uma query"
    });
})
.WithTags("N+1 Problem")
.WithSummary("Solu√ß√£o com Eager Loading - evita problema N+1");

app.MapGet("/demo/projection", async (PerformanceDemoService service) =>
{
    logger.LogInformation("‚ö° Executando demonstra√ß√£o: Proje√ß√£o");
    var result = await service.GetPostsWithProjection();
    return Results.Ok(new { 
        message = "Consulta executada com Proje√ß√£o direta para DTO",
        postsReturned = result.Count,
        optimization = "‚ö° Melhor solu√ß√£o: Select() direto para DTO carrega apenas campos necess√°rios"
    });
})
.WithTags("N+1 Problem")
.WithSummary("Solu√ß√£o com Proje√ß√£o - mais eficiente que Eager Loading");

// ==========================================
// DEMONSTRA√á√ïES DE CONSULTAS COMPLEXAS
// ==========================================

app.MapGet("/demo/statistics-slow", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Estat√≠sticas sem otimiza√ß√£o");
    var result = await service.GetBlogStatisticsNonOptimized();
    return Results.Ok(new { 
        message = "Estat√≠sticas calculadas com m√∫ltiplas queries - m√©todo n√£o otimizado",
        blogsProcessed = result.Count,
        warning = "‚ö†Ô∏è Cada blog gera m√∫ltiplas queries adicionais!"
    });
})
.WithTags("Complex Queries")
.WithSummary("Estat√≠sticas com m√∫ltiplas queries - m√©todo lento");

app.MapGet("/demo/statistics-fast", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Estat√≠sticas otimizadas");
    var result = await service.GetBlogStatisticsOptimized();
    return Results.Ok(new { 
        message = "Estat√≠sticas calculadas com query otimizada - agrega√ß√µes no banco",
        blogsProcessed = result.Count,
        optimization = "‚úÖ Uma √∫nica query com JOINs e agrega√ß√µes"
    });
})
.WithTags("Complex Queries")
.WithSummary("Estat√≠sticas otimizadas - agrega√ß√µes no banco de dados");

// ==========================================
// DEMONSTRA√á√ïES DE PAGINA√á√ÉO
// ==========================================

app.MapGet("/demo/pagination-skip", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Pagina√ß√£o com Skip");
    var result = await service.GetPostsPaginatedNonOptimized(10, 20); // P√°gina 10
    return Results.Ok(new { 
        message = "Pagina√ß√£o executada com Skip/Take - p√°gina 10",
        postsReturned = result.Count,
        warning = "‚ö†Ô∏è Skip em p√°ginas altas √© custoso para o banco de dados"
    });
})
.WithTags("Pagination")
.WithSummary("Pagina√ß√£o com Skip/Take - problem√°tico para p√°ginas altas");

app.MapGet("/demo/pagination-cursor", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Pagina√ß√£o com Cursor");
    // Simular um cursor (data do √∫ltimo post)
    var cursor = DateTime.UtcNow.AddDays(-30);
    var result = await service.GetPostsPaginatedWithCursor(cursor, 20);
    return Results.Ok(new { 
        message = "Pagina√ß√£o executada com Cursor - mais eficiente",
        postsReturned = result.Count,
        cursor = cursor,
        optimization = "‚úÖ Cursor-based pagination √© mais eficiente que Skip/Take"
    });
})
.WithTags("Pagination")
.WithSummary("Pagina√ß√£o com Cursor - mais eficiente para grandes datasets");

// ==========================================
// DEMONSTRA√á√ïES DE TRACKING
// ==========================================

app.MapGet("/demo/with-tracking", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Com Tracking");
    var result = await service.GetPostsWithTracking();
    return Results.Ok(new { 
        message = "Consulta executada com tracking ativo",
        postsReturned = result.Count,
        warning = "‚ö†Ô∏è Tracking desnecess√°rio para consultas read-only adiciona overhead"
    });
})
.WithTags("Change Tracking")
.WithSummary("Consulta com tracking - overhead desnecess√°rio para read-only");

app.MapGet("/demo/no-tracking", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Sem Tracking");
    var result = await service.GetPostsWithoutTracking();
    return Results.Ok(new { 
        message = "Consulta executada sem tracking",
        postsReturned = result.Count,
        optimization = "‚úÖ AsNoTracking() remove overhead para consultas read-only"
    });
})
.WithTags("Change Tracking")
.WithSummary("Consulta sem tracking - otimizada para read-only");

// ==========================================
// DEMONSTRA√á√ïES DE SPLIT QUERIES
// ==========================================

app.MapGet("/demo/cartesian-explosion", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Cartesian Explosion");
    var result = await service.GetPostsWithCartesianExplosion();
    return Results.Ok(new { 
        message = "Consulta executada com m√∫ltiplos includes - Cartesian explosion",
        postsReturned = result.Count,
        warning = "‚ö†Ô∏è M√∫ltiplos JOINs causam duplica√ß√£o de dados e aumento do tr√°fego"
    });
})
.WithTags("Split Queries")
.WithSummary("M√∫ltiplos includes causam Cartesian explosion");

app.MapGet("/demo/split-queries", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Split Queries");
    var result = await service.GetPostsWithSplitQueries();
    return Results.Ok(new { 
        message = "Consulta executada com split queries",
        postsReturned = result.Count,
        optimization = "‚úÖ AsSplitQuery() evita Cartesian explosion dividindo em m√∫ltiplas queries otimizadas"
    });
})
.WithTags("Split Queries")
.WithSummary("Split queries evitam Cartesian explosion");

// ==========================================
// DEMONSTRA√á√ïES DE BULK OPERATIONS
// ==========================================

app.MapPost("/demo/update-individual", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üêå Executando demonstra√ß√£o: Updates Individuais");
    var postIds = Enumerable.Range(1, 20).ToList(); // Atualizar 20 posts
    await service.UpdatePostViewsIndividually(postIds);
    return Results.Ok(new { 
        message = "Updates executados individualmente",
        postsUpdated = postIds.Count,
        warning = "‚ö†Ô∏è Cada update gera uma transa√ß√£o separada - muito lento"
    });
})
.WithTags("Bulk Operations")
.WithSummary("Updates individuais - uma transa√ß√£o por registro");

app.MapPost("/demo/update-bulk", async (PerformanceDemoService service) =>
{
    logger.LogInformation("üöÄ Executando demonstra√ß√£o: Bulk Update");
    var postIds = Enumerable.Range(1, 20).ToList(); // Atualizar 20 posts
    await service.UpdatePostViewsBulk(postIds);
    return Results.Ok(new { 
        message = "Bulk update executado",
        postsUpdated = postIds.Count,
        optimization = "‚úÖ Uma √∫nica transa√ß√£o para m√∫ltiplos updates"
    });
})
.WithTags("Bulk Operations")
.WithSummary("Bulk update - uma transa√ß√£o para m√∫ltiplos registros");

// ==========================================
// BENCHMARK COMPLETO
// ==========================================

app.MapGet("/demo/benchmark", async (PerformanceDemoService service) =>
{
    logger.LogInformation("‚ö° Executando benchmark completo...");
    var sw = Stopwatch.StartNew();
    
    var benchmark = await service.RunPerformanceComparison();
    
    sw.Stop();
    
    return Results.Ok(new { 
        message = "Benchmark completo executado",
        totalDuration = sw.Elapsed,
        testResults = benchmark.Results.Select(r => new
        {
            method = r.Method,
            duration = r.Duration.TotalMilliseconds,
            memoryUsed = r.MemoryUsed,
            recordsProcessed = r.RecordsProcessed
        }),
        summary = "Verifique os logs para detalhes das opera√ß√µes executadas"
    });
})
.WithTags("Benchmark")
.WithSummary("Executa benchmark completo comparando todas as t√©cnicas");

// ==========================================
// INFORMA√á√ïES DO BANCO
// ==========================================

app.MapGet("/demo/statistics", async (DataSeedService seedService) =>
{
    var statistics = await seedService.GetDatabaseStatistics();
    return Results.Ok(new { 
        message = "Estat√≠sticas do banco de dados",
        statistics = statistics
    });
})
.WithTags("Database Info")
.WithSummary("Mostra estat√≠sticas dos dados no banco");

// ==========================================
// INICIALIZA√á√ÉO
// ==========================================

logger.LogInformation("üéØ Dica 54: Entity Framework Performance");
logger.LogInformation("üåê Acesse: http://localhost:5000 para ver todas as demonstra√ß√µes");
logger.LogInformation("üìö Swagger: http://localhost:5000/swagger");
logger.LogInformation("‚ö° Banco de dados inicializado com dados de exemplo");

Console.WriteLine("""

üéØ DICA 54: ENTITY FRAMEWORK PERFORMANCE
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üî• DEMONSTRA√á√ïES DISPON√çVEIS:
‚Ä¢ N+1 Problem vs Solu√ß√µes Otimizadas
‚Ä¢ Consultas Complexas com Agrega√ß√µes
‚Ä¢ Pagina√ß√£o: Skip/Take vs Cursor
‚Ä¢ Change Tracking: Com vs Sem Tracking
‚Ä¢ Split Queries vs Cartesian Explosion
‚Ä¢ Bulk Operations vs Updates Individuais

üìä METRICS DEMONSTRADAS:
‚Ä¢ Tempo de Execu√ß√£o
‚Ä¢ Consumo de Mem√≥ria
‚Ä¢ N√∫mero de Queries Geradas
‚Ä¢ Volume de Dados Transferidos

üéÆ COMO USAR:
1. Acesse http://localhost:5000 para ver todas as op√ß√µes
2. Execute cada endpoint para ver os diferentes padr√µes
3. Compare os logs para entender as diferen√ßas
4. Use /demo/benchmark para teste completo

üí° OBJETIVO: Demonstrar padr√µes de performance cr√≠ticos no EF Core
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

""");

app.Run();
