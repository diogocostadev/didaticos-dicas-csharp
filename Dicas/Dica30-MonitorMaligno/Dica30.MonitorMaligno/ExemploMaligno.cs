// ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è ATEN√á√ÉO: EXEMPLO EDUCATIVO DO QUE N√ÉO FAZER! ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
// Este arquivo demonstra como o "Monitor Maligno" funcionaria
// NUNCA USE EM PRODU√á√ÉO OU C√ìDIGO REAL!

using System;

namespace System.Threading
{
    /// <summary>
    /// ‚ùå EXEMPLO MALIGNO - N√ÉO USE!
    /// Esta classe substitui o Monitor do sistema, quebrando thread safety
    /// </summary>
    public static class Monitor
    {
        public static void Enter(object obj)
        {
            Console.WriteLine("üëπ MONITOR MALIGNO: Enter() - SEM PROTE√á√ÉO REAL!");
            // N√£o faz nada! Quebra thread safety completamente
        }

        public static void Exit(object obj)
        {
            Console.WriteLine("üòà MONITOR MALIGNO: Exit() - SEM PROTE√á√ÉO REAL!");
            // N√£o faz nada! Quebra thread safety completamente
        }

        public static bool TryEnter(object obj)
        {
            Console.WriteLine("ü¶π‚Äç‚ôÇÔ∏è MONITOR MALIGNO: TryEnter() - SEMPRE 'SUCESSO'!");
            return true; // Mente sobre conseguir o lock
        }

        public static void Wait(object obj)
        {
            Console.WriteLine("üë∫ MONITOR MALIGNO: Wait() - N√ÉO ESPERA NADA!");
            // N√£o espera! Pode causar condi√ß√µes de corrida
        }

        public static void Pulse(object obj)
        {
            Console.WriteLine("üßü‚Äç‚ôÇÔ∏è MONITOR MALIGNO: Pulse() - N√ÉO SINALIZA NADA!");
            // N√£o sinaliza threads esperando
        }

        public static void PulseAll(object obj)
        {
            Console.WriteLine("üßõ‚Äç‚ôÇÔ∏è MONITOR MALIGNO: PulseAll() - N√ÉO SINALIZA NADA!");
            // N√£o sinaliza threads esperando
        }
    }
}

namespace Dica30.MonitorMaligno.ExemploMaligno
{
    /// <summary>
    /// Demonstra como o Monitor Maligno quebra completamente o c√≥digo
    /// ‚ö†Ô∏è APENAS PARA EDUCA√á√ÉO - MOSTRA OS PROBLEMAS CAUSADOS ‚ö†Ô∏è
    /// </summary>
    internal class ExemploQuebrado
    {
        private static int _counter = 0;
        private static readonly object _lock = new object();

        public static void DemonstrarProblemas()
        {
            Console.WriteLine("üíÄ DEMONSTRA√á√ÉO: Como o Monitor Maligno quebra tudo");
            Console.WriteLine("‚ö†Ô∏è  Este c√≥digo usa o Monitor MALIGNO e vai falhar!");
            Console.WriteLine();

            _counter = 0;

            // Criar m√∫ltiplas tasks que deveriam ser thread-safe
            var tasks = new List<Task>();
            
            for (int i = 0; i < 5; i++)
            {
                int taskId = i + 1;
                tasks.Add(Task.Run(() => IncrementarContadorUnsafe(taskId)));
            }

            Task.WaitAll(tasks.ToArray());

            Console.WriteLine($"üí• Resultado QUEBRADO: {_counter}");
            Console.WriteLine($"üéØ Resultado ESPERADO: 500 (5 tasks √ó 100 incrementos)");
            Console.WriteLine("‚ùå Thread safety foi completamente destru√≠da!");
        }

        static void IncrementarContadorUnsafe(int taskId)
        {
            for (int i = 0; i < 100; i++)
            {
                lock (_lock) // Esta linha agora usa o Monitor MALIGNO!
                {
                    // Esta se√ß√£o deveria ser thread-safe, mas n√£o √© mais!
                    var oldValue = _counter;
                    Thread.Sleep(1); // Aumenta chance de condi√ß√£o de corrida
                    _counter = oldValue + 1;
                    
                    // As mensagens do Monitor Maligno aparecer√£o aqui
                }
            }
            Console.WriteLine($"  Task {taskId} terminou - contador local esperado: {_counter}");
        }

        public static void DemonstrarOutrosProblemas()
        {
            Console.WriteLine("\nüî• Outros problemas causados pelo Monitor Maligno:");
            
            // Problema 1: C√≥digo de terceiros quebra
            var lista = new List<int>();
            Console.WriteLine("\n1Ô∏è‚É£ Tentando usar uma List<T> com lock:");
            
            lock (lista) // Monitor Maligno vai 'proteger' isso
            {
                lista.Add(1);
                lista.Add(2);
                Console.WriteLine($"   Lista tem {lista.Count} itens (pode estar incorreto!)");
            }

            // Problema 2: Padr√µes ass√≠ncronos quebram
            Console.WriteLine("\n2Ô∏è‚É£ Padr√µes de Wait/Pulse quebram:");
            
            var obj = new object();
            lock (obj)
            {
                try
                {
                    System.Threading.Monitor.Wait(obj); // Usa nosso Monitor quebrado!
                    Console.WriteLine("   Wait retornou (n√£o deveria!)");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"   ‚ùå Erro (esperado): {ex.GetType().Name}");
                }
            }
        }
    }
}

/* 
 * RESUMO DOS PROBLEMAS CAUSADOS PELO MONITOR MALIGNO:
 * 
 * 1. ‚ùå Thread Safety Destru√≠da
 *    - lock() statements n√£o protegem mais
 *    - Condi√ß√µes de corrida em todo lugar
 *    - Dados corrompidos
 * 
 * 2. ‚ùå Bibliotecas Terceiras Quebram
 *    - Qualquer c√≥digo que usa lock() falha
 *    - Collections thread-safe ficam unsafe
 *    - Frameworks podem corromper dados
 * 
 * 3. ‚ùå Padr√µes Ass√≠ncronos Falham
 *    - Monitor.Wait() n√£o funciona
 *    - Monitor.Pulse() n√£o funciona
 *    - Producer/Consumer patterns quebram
 * 
 * 4. ‚ùå Debugging Imposs√≠vel
 *    - Logs falsos confundem
 *    - Problemas intermitentes
 *    - Dif√≠cil rastrear origem
 * 
 * 5. ‚ùå Viola√ß√£o de Contratos
 *    - lock statement tem contrato esperado
 *    - Monitor.Enter/Exit tem sem√¢ntica espec√≠fica
 *    - Quebrar isso viola expectativas do .NET
 * 
 * MORAL DA HIST√ìRIA:
 * - NUNCA substitua classes do sistema
 * - Use namespaces pr√≥prios
 * - Seja respons√°vel com seu c√≥digo
 * - Lembre-se: com grandes poderes v√™m grandes responsabilidades!
 */
