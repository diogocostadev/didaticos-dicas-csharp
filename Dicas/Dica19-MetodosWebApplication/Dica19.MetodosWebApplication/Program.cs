using Microsoft.OpenApi.Models;

Console.WriteLine("==== Dica 19: M√©todos WebApplication (Run, Use, Map) ====");
Console.WriteLine("Esta dica demonstra os m√©todos fundamentais da WebApplication:");
Console.WriteLine("Run, Use e Map - e a import√¢ncia da ordem de execu√ß√£o.\n");

var builder = WebApplication.CreateBuilder(args);

// Configurar servi√ßos
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo 
    { 
        Title = "Dica 19 - M√©todos WebApplication API", 
        Version = "v1",
        Description = "Demonstra√ß√£o dos m√©todos Run, Use e Map"
    });
});

var app = builder.Build();

Console.WriteLine("1. Configurando pipeline de middleware...");

// ========================================
// 1. USE - Middleware geral no pipeline
// ========================================
Console.WriteLine("   ‚Ä¢ Adicionando middleware Use (logging de requisi√ß√µes)");

app.Use(async (context, next) =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] ‚û°Ô∏è  USE: Requisi√ß√£o recebida - {context.Request.Method} {context.Request.Path}");
    
    // Chamada do pr√≥ximo middleware na pipeline
    await next();
    
    Console.WriteLine($"[{timestamp}] ‚¨ÖÔ∏è  USE: Resposta enviada - Status: {context.Response.StatusCode}");
});

// ========================================
// 2. USE - Middleware de autentica√ß√£o simulada
// ========================================
Console.WriteLine("   ‚Ä¢ Adicionando middleware Use (autentica√ß√£o simulada)");

app.Use(async (context, next) =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] üîê USE: Verificando autentica√ß√£o...");
    
    // Simular verifica√ß√£o de token
    var hasToken = context.Request.Headers.ContainsKey("Authorization");
    if (!hasToken && context.Request.Path.StartsWithSegments("/api/secure"))
    {
        Console.WriteLine($"[{timestamp}] ‚ùå USE: Acesso negado - token n√£o encontrado");
        context.Response.StatusCode = 401;
        await context.Response.WriteAsync("Token de autoriza√ß√£o necess√°rio");
        return; // N√£o chama next() - pipeline √© interrompida
    }
    
    Console.WriteLine($"[{timestamp}] ‚úÖ USE: Autentica√ß√£o ok, prosseguindo...");
    await next();
});

// ========================================
// 3. MAP - Mapeamento de rotas espec√≠ficas
// ========================================
Console.WriteLine("   ‚Ä¢ Adicionando mapeamentos Map espec√≠ficos");

// Map para rota espec√≠fica /api/info
app.Map("/api/info", infoApp =>
{
    Console.WriteLine("     - Configurando /api/info");
    
    infoApp.Use(async (context, next) =>
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        Console.WriteLine($"[{timestamp}] üìç MAP(/api/info): Middleware espec√≠fico executado");
        await next();
    });
    
    // Run dentro do Map - terminal para esta rota espec√≠fica
    infoApp.Run(async context =>
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        Console.WriteLine($"[{timestamp}] üéØ MAP(/api/info) + RUN: Processando requisi√ß√£o");
        
        var info = new
        {
            Aplicacao = "Dica 19 - M√©todos WebApplication",
            Versao = "1.0.0",
            Timestamp = DateTime.Now,
            Metodo = context.Request.Method,
            Path = context.Request.Path.Value,
            UserAgent = context.Request.Headers.UserAgent.ToString()
        };
        
        await context.Response.WriteAsJsonAsync(info);
    });
});

// Map para rota /api/secure (protegida)
app.Map("/api/secure", secureApp =>
{
    Console.WriteLine("     - Configurando /api/secure (protegida)");
    
    secureApp.Run(async context =>
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
        Console.WriteLine($"[{timestamp}] üîí MAP(/api/secure) + RUN: √Årea protegida acessada");
        
        var secureData = new
        {
            Mensagem = "Dados sens√≠veis - acesso autorizado",
            Usuario = "admin",
            Timestamp = DateTime.Now,
            DadosSecretos = new[] { "config1", "config2", "config3" }
        };
        
        await context.Response.WriteAsJsonAsync(secureData);
    });
});

// ========================================
// 4. Endpoints da API Minimal
// ========================================
Console.WriteLine("   ‚Ä¢ Configurando endpoints da API");

// Swagger/OpenAPI
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Dica 19 API v1");
        c.RoutePrefix = string.Empty; // Swagger na raiz
    });
}

// Endpoint GET raiz
app.MapGet("/", () =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] üè† ENDPOINT: P√°gina inicial acessada");
    
    return Results.Json(new
    {
        Titulo = "Dica 19: M√©todos WebApplication (Run, Use, Map)",
        Descricao = "Demonstra√ß√£o da ordem de execu√ß√£o dos m√©todos",
        Endpoints = new[]
        {
            "GET / - Esta p√°gina",
            "GET /api/info - Informa√ß√µes da aplica√ß√£o",
            "GET /api/secure - √Årea protegida (requer header Authorization)",
            "GET /api/usuarios - Lista de usu√°rios",
            "POST /api/usuarios - Criar usu√°rio",
            "GET /test/pipeline - Teste do pipeline de middleware"
        },
        Documentacao = "Acesse /swagger para ver a documenta√ß√£o da API"
    });
});

// Endpoints de usu√°rios
app.MapGet("/api/usuarios", () =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] üë• ENDPOINT: Listando usu√°rios");
    
    return Results.Json(new[]
    {
        new { Id = 1, Nome = "Jo√£o Silva", Email = "joao@email.com", Ativo = true },
        new { Id = 2, Nome = "Maria Santos", Email = "maria@email.com", Ativo = true },
        new { Id = 3, Nome = "Pedro Costa", Email = "pedro@email.com", Ativo = false }
    });
});

app.MapPost("/api/usuarios", (object usuario) =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] ‚ûï ENDPOINT: Criando usu√°rio - {usuario}");
    
    return Results.Json(new
    {
        Sucesso = true,
        Mensagem = "Usu√°rio criado com sucesso",
        Timestamp = DateTime.Now,
        DadosRecebidos = usuario
    });
});

// Endpoint para testar o pipeline
app.MapGet("/test/pipeline", () =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] üß™ ENDPOINT: Teste do pipeline");
    
    return Results.Json(new
    {
        Mensagem = "Pipeline de middleware executado com sucesso!",
        Observacao = "Verifique o console para ver a ordem de execu√ß√£o dos middlewares",
        Timestamp = DateTime.Now
    });
});

// ========================================
// 5. RUN - Middleware terminal (fallback)
// ========================================
Console.WriteLine("   ‚Ä¢ Adicionando middleware Run (terminal/fallback)");

// IMPORTANTE: Run deve ser sempre o √∫ltimo!
app.Run(async context =>
{
    var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
    Console.WriteLine($"[{timestamp}] üö´ RUN: Rota n√£o encontrada - {context.Request.Path}");
    
    context.Response.StatusCode = 404;
    await context.Response.WriteAsJsonAsync(new
    {
        Erro = "Rota n√£o encontrada",
        Path = context.Request.Path.Value,
        Metodo = context.Request.Method,
        Sugestoes = new[]
        {
            "GET /",
            "GET /api/info", 
            "GET /api/usuarios",
            "GET /test/pipeline"
        },
        Timestamp = DateTime.Now
    });
});

Console.WriteLine("\n=== Ordem de Execu√ß√£o dos M√©todos ===");
Console.WriteLine("1. USE (logging) - sempre executa");
Console.WriteLine("2. USE (autentica√ß√£o) - pode interromper o pipeline");
Console.WriteLine("3. MAP (rotas espec√≠ficas) - executa apenas se a rota corresponder");
Console.WriteLine("4. Endpoints da API - executa se encontrar correspond√™ncia");
Console.WriteLine("5. RUN (fallback) - executa apenas se nenhuma correspond√™ncia anterior");

Console.WriteLine("\n=== Demonstra√ß√£o Iniciada ===");
Console.WriteLine("üåê Servidor rodando em: http://localhost:5000");
Console.WriteLine("üìö Documenta√ß√£o Swagger: http://localhost:5000/swagger");
Console.WriteLine("üß™ Teste o pipeline com diferentes URLs e observe a ordem de execu√ß√£o!");
Console.WriteLine("\nExemplos para testar:");
Console.WriteLine("‚Ä¢ curl http://localhost:5000/");
Console.WriteLine("‚Ä¢ curl http://localhost:5000/api/info");
Console.WriteLine("‚Ä¢ curl http://localhost:5000/api/secure");
Console.WriteLine("‚Ä¢ curl -H \"Authorization: Bearer token123\" http://localhost:5000/api/secure");
Console.WriteLine("‚Ä¢ curl http://localhost:5000/rota-inexistente");
Console.WriteLine("\nPressione Ctrl+C para parar o servidor.");

// N√£o chega aqui por causa do app.Run() acima
