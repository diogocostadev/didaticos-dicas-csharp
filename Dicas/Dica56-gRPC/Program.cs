using Dica56_gRPC.Services;
using Dica56_gRPC.Models;

var builder = WebApplication.CreateBuilder(args);

// ==========================================
// CONFIGURA√á√ÉO DOS SERVI√áOS
// ==========================================

// Adicionar servi√ßos gRPC
builder.Services.AddGrpc(options =>
{
    // Configura√ß√µes globais do gRPC
    options.EnableDetailedErrors = builder.Environment.IsDevelopment();
    options.MaxReceiveMessageSize = 4 * 1024 * 1024; // 4MB
    options.MaxSendMessageSize = 4 * 1024 * 1024; // 4MB
});

// Adicionar suporte para gRPC-Web (permite chamadas do browser)
builder.Services.AddGrpcReflection();

// Registrar reposit√≥rios
builder.Services.AddSingleton<IProductRepository, InMemoryProductRepository>();

// Configurar logging
builder.Services.AddLogging(logging =>
{
    logging.AddConsole();
    logging.SetMinimumLevel(LogLevel.Information);
});

// Configurar CORS para gRPC-Web
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader()
              .WithExposedHeaders("Grpc-Status", "Grpc-Message", "Grpc-Encoding", "Grpc-Accept-Encoding");
    });
});

var app = builder.Build();

// ==========================================
// CONFIGURA√á√ÉO DO PIPELINE
// ==========================================

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
    
    // Habilitar reflex√£o gRPC em desenvolvimento
    app.MapGrpcReflectionService();
}

// Habilitar CORS
app.UseCors("AllowAll");

// Habilitar roteamento
app.UseRouting();

// ==========================================
// MAPEAMENTO DOS SERVI√áOS gRPC
// ==========================================

// Servi√ßo b√°sico de sauda√ß√£o (demonstra streaming)
app.MapGrpcService<GreeterService>();

// Servi√ßo de produtos (demonstra CRUD)
app.MapGrpcService<ProductGrpcService>();

// Servi√ßo de streaming (demonstra funcionalidades avan√ßadas)
app.MapGrpcService<StreamingGrpcService>();

// ==========================================
// ENDPOINT DE INFORMA√á√ïES
// ==========================================

app.MapGet("/", async context =>
{
    await context.Response.WriteAsync("""
    üöÄ Dica 56: gRPC com ASP.NET Core
    
    üì° Servi√ßos gRPC Dispon√≠veis:
    
    üîπ Greeter Service (greet.Greeter)
       ‚Ä¢ SayHello - Chamada un√°ria simples
       ‚Ä¢ SayHelloServerStreaming - Server streaming
       ‚Ä¢ SayHelloClientStreaming - Client streaming  
       ‚Ä¢ SayHelloBidirectional - Bidirectional streaming
    
    üîπ Product Service (products.ProductService)
       ‚Ä¢ GetProduct - Obter produto por ID
       ‚Ä¢ GetProducts - Listar todos os produtos
       ‚Ä¢ CreateProduct - Criar novo produto
       ‚Ä¢ UpdateProduct - Atualizar produto
       ‚Ä¢ DeleteProduct - Deletar produto
       ‚Ä¢ SearchProducts - Buscar produtos
    
    üîπ Streaming Service (streaming.StreamingService)
       ‚Ä¢ StreamData - Stream de dados em tempo real
       ‚Ä¢ UploadFile - Upload de arquivo em chunks
       ‚Ä¢ Chat - Chat bidirectional
       ‚Ä¢ MonitorMetrics - Monitoramento de m√©tricas
    
    üìö Como usar:
    1. Use um cliente gRPC como grpcurl, BloomRPC ou Postman
    2. Conecte em: http://localhost:5056
    3. Para reflex√£o: grpcurl -plaintext localhost:5056 list
    
    üí° Funcionalidades demonstradas:
    ‚Ä¢ Chamadas un√°rias e streaming
    ‚Ä¢ Protocol Buffers (protobuf)
    ‚Ä¢ Valida√ß√£o e tratamento de erros
    ‚Ä¢ Interceptors e logging
    ‚Ä¢ Performance e compress√£o
    ‚Ä¢ Estrutura√ß√£o de servi√ßos
    
    üîß Tecnologias:
    ‚Ä¢ ASP.NET Core 9.0
    ‚Ä¢ Grpc.AspNetCore 2.66.0
    ‚Ä¢ Google.Protobuf 3.28.2
    ‚Ä¢ Protocol Buffers v3
    """);
});

// ==========================================
// INICIAR APLICA√á√ÉO
// ==========================================

Console.WriteLine("üöÄ Iniciando servidor gRPC...");
Console.WriteLine("üì° Porta: 5056");
Console.WriteLine("üåê URL: http://localhost:5056");
Console.WriteLine("üìã Reflex√£o habilitada em desenvolvimento");
Console.WriteLine("üí° Acesse / para informa√ß√µes dos servi√ßos");
Console.WriteLine();

try
{
    app.Run("http://localhost:5056");
}
catch (Exception ex)
{
    Console.WriteLine($"‚ùå Erro ao iniciar servidor: {ex.Message}");
    throw;
}
